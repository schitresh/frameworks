{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Backend Frameworks","text":"<ul> <li>Rails</li> <li>React</li> <li>SQL</li> </ul>"},{"location":"rails/introduction","title":"Introduction","text":"<ul> <li>Web application development framework written in ruby programming language<ul> <li>Designed to program web applications easily by making basic assumptions</li> <li>Allows to write less code while accomplishing more</li> </ul> </li> <li>It is opionionated software<ul> <li>Makes assumption that there is a best way to do things</li> </ul> </li> <li>Don't Repeat Yourself (DRY)<ul> <li>Every piece of knowledge must have a<ul> <li>Single, unambiguous, authoritative representation within a system</li> </ul> </li> <li>By not writing the same information over and over again<ul> <li>Code is more maintainable, more extensible, and less buggy</li> </ul> </li> </ul> </li> <li>Convention Over Configuration<ul> <li>Rails has opinions and defaults to this set of conventions</li> <li>Rather than require that you define them yourself through endless config files</li> </ul> </li> <li>To create a new application called blog, run <code>rails new blog</code><ul> <li>This will also install gem dependencies already mentioned in Gemfile</li> </ul> </li> </ul>"},{"location":"rails/introduction#structure","title":"Structure","text":"<ul> <li>app/<ul> <li>controllers, models, views, helpers, mailers, channels, jobs, assets</li> </ul> </li> <li>bin/<ul> <li>Rails scripts to start, set up, update, deploy, run application</li> </ul> </li> <li>config/<ul> <li>Configuration for routes, database, etc.</li> </ul> </li> <li>db/<ul> <li>Current database schema and migrations</li> </ul> </li> <li>lib/<ul> <li>Extended modules for application</li> </ul> </li> <li>log/</li> <li>public/<ul> <li>Static files &amp; complied assets, exposed as is when app is running</li> </ul> </li> <li>storage/<ul> <li>Active storage file for disk service</li> </ul> </li> <li>test/<ul> <li>Unit tests, fixtures, etc.</li> </ul> </li> <li>tmp/<ul> <li>Temporary files like cache, pid files</li> </ul> </li> <li>vendor/<ul> <li>Third-party code like vendored gems</li> </ul> </li> <li>.dockerignore</li> <li>.gitattributes</li> <li>.gitignore</li> <li>.ruby-version</li> <li>config.ru<ul> <li>Rack config for rack-based servers used to start application</li> </ul> </li> <li>Dockerfile</li> <li>Gemfile, Gemfile.lock<ul> <li>Specifies gem dependencies used by bundler gem</li> </ul> </li> </ul>"},{"location":"rails/introduction#basics","title":"Basics","text":"<ul> <li>To start web server, run <code>rails server</code><ul> <li>Starts up Puma, a web server distributed with rails by default</li> <li>To check on browser, go to 'localhost:3000'</li> </ul> </li> <li>Application classes and modules are available everywhere<ul> <li>It's not required to load anything under 'app' with 'require'</li> <li>Loading is required for only files under 'lib' directory</li> </ul> </li> </ul>"},{"location":"rails/introduction#command-line","title":"Command Line","text":"<ul> <li>Create new application<ul> <li>rails new temp</li> <li>rails new temp --database=postgresql</li> </ul> </li> <li>Server<ul> <li>rails server</li> <li>rails server -e production</li> <li>rails server -p 4000</li> </ul> </li> <li>Generate<ul> <li>rails generate scaffold User attr1:type1 attr2:type2<ul> <li>model, migration, controller, routes, views</li> </ul> </li> <li>rails generate model User attr1:type1 attr2:type2<ul> <li>model, migration</li> </ul> </li> <li>rails generate controller Users action1 action2<ul> <li>controller, helper</li> </ul> </li> <li>rails generate mailer User</li> <li>rails generate job users_cleanup</li> </ul> </li> <li>Destroy<ul> <li>rails destroy scaffold User</li> <li>rails destroy model User</li> <li>rails destroy controller User</li> </ul> </li> <li>Routes<ul> <li>rails routes</li> </ul> </li> <li>Console<ul> <li>rails console</li> </ul> </li> <li>Assets<ul> <li>rails assets:precompile</li> <li>rails assets:clean</li> </ul> </li> <li>Tmp<ul> <li>rails tmp:clear</li> <li>rails tmp:cache:clear</li> </ul> </li> </ul>"},{"location":"rails/models/introduction","title":"Active Record","text":"<ul> <li>Layer representing business data &amp; logic (M in MVC)</li> <li>Facilitates creation &amp; use of business objects whose data requires persistent storage</li> <li>Implementation of Active Record pattern (description of ORM system)</li> <li>Object Relationship Mapping (ORM) connects rich objects of application to RDBMS tables</li> </ul>"},{"location":"rails/models/introduction#schema-conventions","title":"Schema Conventions","text":"<ul> <li>Database tables should be in camelcase and pluralized<ul> <li>Class 'BookClub' should have table 'book_clubs'</li> </ul> </li> <li>Keys<ul> <li>Foreign key should be singularized: order_id</li> <li>Primary key will be 'id' column with type 'bigint' for postgres &amp; mysql</li> </ul> </li> <li>Optional columns managed by rails (are reserved keywords)<ul> <li>created_at</li> <li>updated_at</li> <li>lock_version: Adds optimistic locking to a model</li> <li>type: For single table inheritance</li> <li>(association)_type: For polymorphism</li> <li>(association)_count: To cache the number of objects in association</li> </ul> </li> </ul>"},{"location":"rails/models/introduction#models","title":"Models","text":"<ul> <li>When generating an app, an abstract <code>ApplicationRecord</code> is created<ul> <li>Present in 'app/models/application_record.rb'</li> <li>Base class for all model files to convert ruby class into active record model</li> </ul> </li> </ul> <pre><code>class User &lt; ApplicationRecord\nend\n</code></pre>"},{"location":"rails/models/introduction#crud","title":"Crud","text":"<pre><code># Create\nuser = User.create(name: \"David\", occupation: \"Code Artist\")\n\nuser = User.new\nuser.name = \"David\"\nuser.occupation = \"Code Artist\"\nuser.save\n\nuser = User.new do |u|\n  u.name = \"David\"\n  u.occupation = \"Code Artist\"\nend\n\n# Read\nusers = User.all\nusers = User.first\ndavid = User.find_by(name: 'David')\nusers = User.where(name: 'David', occupation: 'Code Artist').order(created_at: :desc)\n\n# Update\nuser = User.find_by(name: 'David')\nuser.name = 'Dave'\nuser.save\n\nuser = User.find_by(name: 'David')\nuser.update(name: 'Dave')\nUser.update_all(max_login_attempts: 3, must_change_password: true)\n\n# Destroy\nuser = User.find_by(name: 'David')\nuser.destroy\n\nUser.destroy_by(name: 'David')\nUser.destroy_all\n</code></pre>"},{"location":"rails/models/migrations","title":"Migration","text":"<ul> <li>Used to alter database schema over time in a consistent way<ul> <li>It can be thought of as a new version of the app's database</li> <li>Each migration is wrapped in a transaction</li> </ul> </li> <li>File is appended with timestamp to track which migration to run &amp; their order<ul> <li>For example: 20240101120000_create_products.rb</li> <li>Stored in 'db/migrate' directory</li> </ul> </li> <li>Running migrations generates or updates <code>db/schema.rb</code><ul> <li>Captures the current state of the database schema</li> </ul> </li> <li>Active Record way claims that intelligence belongs in models &amp; not database<ul> <li>Triggers, constraints, validations in database is not recommended</li> <li>Database contraints make testing &amp; maintenance more difficult</li> <li>Though some constraints that don't depend on models can be kept in database<ul> <li>For faster processing and reduce overhead in rails</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/models/migrations#commands","title":"Commands","text":"<ul> <li><code>rails db:create</code></li> <li><code>rails db:schema:load</code></li> <li><code>rails db:seed</code></li> <li><code>rails db:setup</code> runs create, schema:load &amp; seed</li> <li><code>rails db:prepare</code> is similar to setup but idempotent</li> <li><code>rails db:drop</code></li> <li><code>rails db:reset</code> runs dropm setup</li> <li><code>rails db:migrate</code> runs pending migrations</li> <li><code>rails db:migrate:up</code>, <code>rails db:migrate:down</code> for specific method</li> <li><code>rails db:migrate VERSION=20240101120000</code> for specific version</li> <li><code>rails db:migrate RAILS_ENV=test</code> to run in specific environment</li> <li><code>rails db:rollback</code> rollbacks last migration</li> <li><code>rails db:rollback STEP=2</code> rollbacks last 2 migrations</li> </ul>"},{"location":"rails/models/migrations#create-table","title":"Create Table","text":"<pre><code># Create Table\n# rails generate migration CreateProducts\n# rails generate migration CreateProducts name:string description:text\n# rails generate model Product name:string description:text\nclass CreateProducts &lt; ActiveRecord::Migration[7.1]\n  def change\n    create_table :products do |t|\n      t.string :name\n      t.text :description\n\n      t.timestamps # Adds created_at, updated_at (managed by rails)\n    end\n  end\nend\n\n# Create Join Table\ncreate_join_table :products, :categories, table_name: :categorization\n\ncreate_join_table :products, :categories do |t|\n  t.index :product_id\n  t.index :category_id\nend\n</code></pre>"},{"location":"rails/models/migrations#change-table","title":"Change Table","text":"<pre><code>change_table :products do |t|\n  t.remove :description, :name\n  t.string :part_number\n  t.index :part_number\n  t.rename :upccode, :upc_code\nend\n</code></pre>"},{"location":"rails/models/migrations#add-columns","title":"Add Columns","text":"<pre><code># rails generate migration AddCategoryToProducts price:decimal:index\nclass AddPriceToProducts &lt; ActiveRecord::Migration[7.1]\n  def change\n    add_column :products, :price, :decimal\n    add_index :products, :price\n  end\nend\n\n# Details\n# rails generate migration AddDetailsToProducts 'price:decimal{5,2}'\nadd_column :products, :price, :decimal, precision: 5, scale: 2\n\n# Null &amp; Default\n# Cannot be specified in command line\nadd_column :products, :available, :boolean, null: false, default: true\nadd_column :products, :available, :boolean, null: true\n\n# Association\n# rails generate migration AddUserRefToProducts user:references\nadd_reference :products, :user, foreign_key: true\n# rails generate migration AddDetailsToProducts supplier:references{polymorphic}\nadd_reference :products, :supplier, polymorphic: true\n</code></pre>"},{"location":"rails/models/migrations#remove-column","title":"Remove Column","text":"<pre><code># rails generate migration RemoveCategoryFromProducts category:string\nclass RemoveCategoryFromProducts &lt; ActiveRecord::Migration[7.1]\n  def change\n    remove_column :products, :category, :string\n  end\nend\n</code></pre>"},{"location":"rails/models/migrations#change-columns","title":"Change Columns","text":"<pre><code>change_column :products, :part_number, :text\n</code></pre>"},{"location":"rails/models/migrations#reversal","title":"Reversal","text":"<pre><code># Generally change method is used to rollback a migration\n# But if active record doesn't know how to reverse a migration\n# Up &amp; down methods can be used to specify it\nclass ChangeProductsPrice &lt; ActiveRecord::Migration[7.1]\n  def up\n    add_column :products, :price, :string\n    # If required, run some queries to update data\n  end\n\n  def down\n    # If required, run some queries to update data\n    remove_column :products, :price, :string\n  end\nend\n</code></pre>"},{"location":"rails/models/validations","title":"Validations","text":"<ul> <li>Ensures that only valid data is saved into the database<ul> <li>Database agnostic and cannot be bypassed by end users</li> <li>Convenient to test and maintain</li> </ul> </li> <li>Triggered by<ul> <li>create, create!, save, save!, update, update!</li> <li>Object is saved only if there is no error</li> <li>Bang methods also raise an exception</li> </ul> </li> <li>Skipped by<ul> <li>insert, insert!, insert_all, insert_all!, upsert, upsert_all</li> <li>update_all, update_attribute, update_column, update_columns</li> </ul> </li> <li>Validations can be triggered manually using <code>valid?</code> or <code>invalid?</code></li> <li>Validations can also be skipped using <code>save(validate: false)</code></li> <li>If any validation fails, the errors are stored in <code>errors</code> attribute</li> </ul> <pre><code>class Product &lt; ApplicationRecord\n  validates :name, presence: true, length: { maximum: 100 }\nend\n</code></pre>"},{"location":"rails/models/validations#helpers","title":"Helpers","text":"<pre><code># Acceptance\n# Should be accepted like terms or service, checks for truthy values\n# Triggers if not nil\nvalidates :terms, acceptance: true\nvalidates :terms, acceptance: { message: 'must be abided' }\nvalidates :terms, acceptance: { accept: 'yes' }\nvalidates :terms, acceptance: { accept: ['yes', 'accepted'] }\n\n# Confirmation\n# Where there is a confirmation field, like email or password\n# Triggers if not nil (requires separate presence check)\nvalidates :email, confirmation: true\nvalidates :email, confirmation: { case_sensitive }\nvalidates :email_confirmation, presence: true, if: :email_changed?\n\n# Comparison\n# equal_to, greater_than, greater_than_or_equal_to\n# less_than, less_than_or_equal_to, other_than\nvalidates :end_date, comparison: { greater_than: :start_date }\n\n# Format\n# with or without\nvalidates :legacy_code, format: { with: /\\A[a-zA-Z]+\\z/, message: 'only letters' }\n\n# Inclusion &amp; Exclusion\nvalidates :size, inclusion: { in: %w(small medium large) }\nvalidates :size, exclusion: { in: %w(small medium large) }\n\n# Length\nvalidates :name, length: { minimum: 2 }\nvalidates :bio, length: { maximum: 500 }\nvalidates :password, length: { in: 6..20 }\nvalidates :registration_number, length: { is: 6 }\n\n# Numericality\n# equal_to, greater_than, greater_than_or_equal_to\n# less_than, less_than_or_equal_to, other_than, in, even, odd\nvalidates :points, numericality: true\nvalidates :games_played, numericality: { only_integer: true }\n\n# Presence &amp; Absence\nvalidates :name, :login, :email, presence: true\nvalidates :name, :login, :email, absence: true\n\n# Uniqueness\nvalidates :email, uniqueness: true\nvalidates :name, uniqueness: { case_sensitive: false}\nvalidates :department, uniqueness: { scope: :company }\n\n# Associated\n# Validates association every time the object is saved\n# Should not be used in both models, will create infinite loop\nhas_many :books\nvalidates_associated :books\n</code></pre>"},{"location":"rails/models/validations#common-attributes","title":"Common Attributes","text":"<pre><code># allow_nil, allow_blank\nvalidates :size, inclusion: { in: %w(small medium large), allow_nil: true\nvalidates :title, length: { is: 5 }, allow_blank: true\n\n# message\nvalidates :name, presence: { message: \"must be given please\" }\n# Dynamically available attributes: value, attribute, model\nvalidates :age, numericality: { message: \"%{value} seems wrong\" }\n\n# on\nvalidates :email, uniqueness: true, on: :create # on: :update\nvalidates :name, presence: true # Validates on both create and update\nvalidates :email, uniqueness: true, on: :account_setup # Custom context\nvalidates :title, presence: true, on: [:update, :ensure_title]\n\n# if, unless\nvalidates :card_number, presence: true, if: :paid_with_card?\nvalidates :password, confirmation: true, unless: -&gt; { password.blank? }\n# Grouping\nwith_options if: :is_admin? do |admin|\n  admin.validates :password, length: { minimum: 10 }\n  admin.validates :email, presence: true\nend\n</code></pre>"},{"location":"rails/models/validations#custom-validation","title":"Custom Validation","text":"<pre><code># Validates Each\nvalidates_each :name, :surname do |record, attr, value|\n  record.errors.add(attr, 'must start with upper case') if /\\A[[:lower:]]/.match?(value)\nend\n\n# Validates With\n# Initialized only once for the whole application cycle\n# And not on each validation run\nclass CategoryValidator &lt; ActiveModel::Validator\n  def validate(record)\n    if record.category == 'Deprecated'\n      record.errors.add(:base, 'This category is no longer supported')\n    end\n  end\nend\n\nclass DeprecatedValidator &lt; ActiveModel::Validator\n  def validate(record)\n    if options[:fields].any? { |field| record.send(field) == \"Deprecated\" }\n      record.errors.add(:base, 'This is no longer supported')\n    end\n  end\nend\n\nvalidates_with CategoryValidator\nvalidates_with CategoryValidator, OrderValidator, on: :create\nvalidates_with DeprecatedValidator, fields: %i[category tag type]\n\n# Validate with Methods\nvalidate :discount_cannot_be_greater_than_amount\nvalidate :check_expiration_date, on: :create, if: :expiration_date\n\ndef discount_cannot_be_greater_than_amount\n  errors.add(:discount, \"cannot be greater than amount\") if discount &gt; amount\nend\n</code></pre>"},{"location":"rails/models/validations#errors","title":"Errors","text":"<pre><code>person.valid?\nperson.errors.full_messages\nperson.errors.first.details\nperson.errors[:name]\n</code></pre>"},{"location":"rails/models/callbacks","title":"Callbacks","text":"<ul> <li>Active Record provides hooks into the object life cycle (create, update, destroy)</li> <li>These can be triggered before or after an alteration of an object's state</li> <li>Avoid calls to update, save, etc. in callbacks to avoid side-effects</li> <li>Triggered by<ul> <li>create, destroy, save, save(validate: false), update (&amp; their bang counterparts)</li> <li>destroy_all, destroy_by, touch, update_attribute</li> </ul> </li> <li>Skipped by<ul> <li>insert, insert!, insert_all, insert_all!, upsert, upsert_all</li> <li>update_column, update_columns, update_all</li> <li>delete, delete_all, delete_by, touch_all</li> </ul> </li> </ul> <pre><code>class Product &lt; ApplicationRecord\n  before_validation :assign_default_category, on: :create, if: :category_required\n  before_create -&gt; { self.name = name.capitalize }\n  after_save do\n    notify_sellers\n  end\n\n  private\n\n    def assign_default_category\n      # Avoid calls to update, save, etc. in callbacks to avoid side-effects\n      self.category = 'default' if category.blank?\n    end\nend\n</code></pre>"},{"location":"rails/models/callbacks#execution","title":"Execution","text":"<ul> <li>After registering callbacks for a model, they are queued for execution<ul> <li>It includes validations, callbacks, database operations</li> </ul> </li> <li>The whole callback chain is wrapped in a transaction<ul> <li>If any callback raises an exception, the execution chain get halted</li> <li>And a ROLLBACK is issued</li> </ul> </li> <li>To intentionally stop a chain, use <code>throw :abort</code></li> </ul>"},{"location":"rails/models/callbacks#available-callbacks","title":"Available Callbacks","text":"<ul> <li>Listed in the order in which they are called</li> <li>Create &amp; Update<ul> <li>before_validation</li> <li>after_validation</li> <li>before_save</li> <li>around_save</li> <li>before_create / before_update</li> <li>around_create / around_update</li> <li>after_create / after_update</li> <li>after_save</li> <li>after_commit, after_rollback</li> </ul> </li> <li>Destroy<ul> <li>before_destroy</li> <li>around_destroy</li> <li>after_destroy</li> <li>after_commit, after_rollback</li> </ul> </li> <li>Others<ul> <li>after_find (triggered by find methods)</li> <li>after_initialize (triggered by 'new')</li> <li>after_touch (triggered by 'touch')</li> </ul> </li> <li>Association<ul> <li>before_add</li> <li>before_remove</li> <li>after_add</li> <li>after_remove</li> </ul> </li> </ul>"},{"location":"rails/models/callbacks#callback-behavior","title":"Callback Behavior","text":"<ul> <li>after_save, after_create, after_update<ul> <li>Called before committing data to the database</li> <li>If any error occurs in the callback, the transaction will be rolled back</li> <li>And the data will not be persisted</li> </ul> </li> <li>after_commit<ul> <li>Called after committing data to the database</li> <li>If any error occurs in the callback, data will still be persisted</li> <li>Should be used when model needs to interact with external system<ul> <li>That is not part of database transaction</li> <li>Like notifications, emails, async third party calls</li> </ul> </li> </ul> </li> <li>before_destroy<ul> <li>Ensure that it executes before records are deleted</li> <li>Place before <code>dependent: :destroy</code> associations or use <code>prepend: true</code></li> </ul> </li> <li>Order<ul> <li>Callbacks run in the order they are defined</li> <li>But transactional (commit/rollback) callbacks could be reversed<ul> <li>Depends on <code>run_after_transaction_callbacks_in_order_defined</code> flag in config</li> <li>Default value from rails 7.1 is true for this flag</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/models/callbacks#association-callbacks","title":"Association Callbacks","text":"<pre><code>class Author &lt; ApplicationRecord\n  has_many :books, before_add: :check_credit_limit\n  # Stacking callbacks\n  has_many :books, before_add: [:check_credit_limit, :calculate_shipping_charges]\n\n  def check_credit_limit(book)\n    throw(:abort) if limit_reached?\n  end\nend\n\n# Triggers `before_add` callback\nauthor.books &lt;&lt; book\nauthor.books = [book, book2]\n\n# Does not trigger the `before_add` callback\nbook.update(author_id: 1)\n</code></pre>"},{"location":"rails/models/callbacks#conditional-callbacks","title":"Conditional Callbacks","text":"<pre><code>before_save :normalize_card_number, if: :paid_with_card?\nbefore_save :normalize_card_number, if: -&gt; { paid_with_card? }\nbefore_save :filter_content, if: [:filters_enabled?, :untrusted_author?]\n\nafter_commit :normalize_card_number, on: :create\nafter_commit :send_notification # Runs on create, update, destroy\n\n# Aliases for after_commit\n# Cannnot run both after_create_commit &amp; after_update_commit on the same method\nafter_create_commit :method\nafter_update_commit :method\nafter_save_commit :method # create &amp; update\nafter_destroy_commit :method\n</code></pre>"},{"location":"rails/models/callbacks#callback-classes","title":"Callback Classes","text":"<pre><code>class FileDestroyerCallback\n  def self.after_destroy(file)\n    File.delete(file.filepath) if File.exist?(file.filepath)\n  end\nend\n\nclass PictureFile &lt; ApplicationRecord\n  after_destroy FileDestroyerCallback\nend\n\n# If an instantiated object is required to track state, use instance method\nclass FileDestroyerCallback\n  def after_destroy(file)\n    File.delete(file.filepath) if File.exist?(file.filepath)\n  end\nend\n\nclass PictureFile &lt; ApplicationRecord\n  after_destroy FileDestroyerCallback.new\nend\n</code></pre>"},{"location":"rails/models/associations","title":"Associations","text":"<ul> <li>Connections between Active Record models to make common operations simpler</li> <li>Makes it easier to perform operations and query</li> <li>Types<ul> <li>belongs_to</li> <li>has_one</li> <li>has_one through</li> <li>has_many</li> <li>has_many through</li> <li>has_and_belongs_to_many</li> </ul> </li> </ul>"},{"location":"rails/models/associations#belongs-to","title":"Belongs To","text":"<ul> <li>Each instance belongs to one instance of the associated model</li> <li>Must use singular term</li> </ul> <pre><code>class Book &lt; ApplicationRecord\n  # Requires to add author_id column in books table\n  belongs_to :author\n  belongs_to :author, optional: true\nend\n</code></pre>"},{"location":"rails/models/associations#has-one","title":"Has One","text":"<ul> <li>The associated model has a reference to this model</li> <li>Must use singular term</li> </ul> <pre><code>class Supplier &lt; ApplicationRecord\n  # Required to add supplier_id in accounts table\n  has_one :account\nend\n</code></pre>"},{"location":"rails/models/associations#has-one-through","title":"Has One Through","text":"<pre><code>class Supplier &lt; ApplicationRecord\n  has_one :account\n  has_one :account_history, through: :account\nend\n\nclass Account &lt; ApplicationRecord\n  belongs_to :supplier\n  has_one :account_history\nend\n\nclass AccountHistory &lt; ApplicationRecord\n  belongs_to :account\nend\n</code></pre>"},{"location":"rails/models/associations#has-many","title":"Has Many","text":"<ul> <li>Each instance has zero or more instances of associated model</li> <li>Must use plural term</li> </ul> <pre><code>class Author &lt; ApplicationRecord\n  has_many :books\nend\n</code></pre>"},{"location":"rails/models/associations#has-many-through","title":"Has Many Through","text":"<pre><code>class Document &lt; ApplicationRecord\n  has_many :sections\n  has_many :paragraphs, through: :sections\nend\n\nclass Section &lt; ApplicationRecord\n  belongs_to :document\n  has_many :paragraphs\nend\n\nclass Paragraph &lt; ApplicationRecord\n  belongs_to :section\nend\n</code></pre>"},{"location":"rails/models/associations#has-and-belongs-to-many","title":"Has and Belongs to Many","text":"<ul> <li>Each instance has zero or more instances of associated model</li> <li>And each associated instance has zero or more instances of current model</li> </ul> <pre><code>class Assembly &lt; ApplicationRecord\n  has_and_belongs_to_many :parts\nend\n\nclass Part &lt; ApplicationRecord\n  has_and_belongs_to_many :assemblies\nend\n</code></pre>"},{"location":"rails/models/association_relationships","title":"Association Relationships","text":""},{"location":"rails/models/association_relationships#one-to-one","title":"One to One","text":"<pre><code># managers table should have project_id\nclass Manager &lt; ApplicationRecord\n  belongs_to :project\nend\n\nclass Project &lt; ApplicationRecord\n  has_one :manager\nend\n\n# Migration\nadd_reference :managers, :project, foreign_key: true\n</code></pre>"},{"location":"rails/models/association_relationships#one-to-many","title":"One to Many","text":"<pre><code># books table should have author_id\nclass Book &lt; ApplicationRecord\n  belongs_to :author\nend\n\nclass Author &lt; ApplicationRecord\n  has_many :books\nend\n\n# Migration\nadd_reference :books, :author, foreign_key: true\n</code></pre>"},{"location":"rails/models/association_relationships#many-to-many","title":"Many to Many","text":""},{"location":"rails/models/association_relationships#has-many-through","title":"Has Many Through","text":"<ul> <li>Should be used if required to add logic to the joining model</li> <li>Recommended to create join table using composite primary key<ul> <li>Via <code>primary_key: [:physician_id, :patient_id]</code></li> </ul> </li> </ul> <pre><code>class Physician &lt; ApplicationRecord\n  has_many :appointments\n  has_many :patients, through: :appointments\nend\n\nclass Appointment &lt; ApplicationRecord\n  belongs_to :physician\n  belongs_to :patient\nend\n\nclass Patient &lt; ApplicationRecord\n  has_many :appointments\n  has_many :physicians, through: :appointments\nend\n\n# Migration\ncreate_table :appointments, primary_key: [:physician_id, :patient_id] do |t|\n  t.belongs_to :physician\n  t.belongs_to :patient\n  t.datetime :appointment_date\n  t.timestamps\nend\n</code></pre>"},{"location":"rails/models/association_relationships#has-and-belongs-to-many","title":"Has and Belongs to Many","text":"<ul> <li>Should be used if the joining model is not required</li> <li>Recommended to create join table with no primary key via <code>id: false</code><ul> <li>Use <code>create_join_table</code> to handle this implicitly</li> </ul> </li> </ul> <pre><code>class Physician &lt; ApplicationRecord\n  has_and_belongs_to_many :patients\nend\n\nclass Patient &lt; ApplicationRecord\n  has_and_belongs_to_many :physicians\nend\n\n# Migration\ncreate_table :physicians_patients, id: false do |t|\n  t.belongs_to :physician\n  t.belongs_to :patient\n  t.index [:physician_id, :patient_id]\n  t.index [:patient_id, :physician_id]\nend\n# Or\ncreate_join_table :physicians_patients, :parts do |t|\n  t.index :physician_id\n  t.index :patient_id\n  t.index [:physician_id, :patient_id]\n  t.index [:patient_id, :physician_id]\nend\n</code></pre>"},{"location":"rails/models/association_relationships#polymorphism","title":"Polymorphism","text":"<ul> <li>A model can belong to multiple other models on a single association</li> </ul> <pre><code># images table should have object_id &amp; object_type\n# Migration: `add_reference :images, :object, polymorphic: true`\n# Add index on [:object_type, :object_id]\n# For employee, object_type will be 'Employee' &amp; object_id will be employee.id\nclass Image &lt; ApplicationRecord\n  belongs_to :object, polymorphic: true\nend\n\nclass Employee &lt; ApplicationRecord\n  has_many :pictures, as: :object\nend\n\nclass Product &lt; ApplicationRecord\n  has_many :pictures, as: :object\nend\n\n# Migration\ncreate_table :images do |t|\n  t.references :object, polymorphic: true\n  t.timestamps\nend\n</code></pre>"},{"location":"rails/models/association_relationships#self-joins","title":"Self Joins","text":"<pre><code>class Employee &lt; ApplicationRecord\n  has_many :subordinates, class_name: 'Employee', foreign_key: 'manager_id'\n  belongs_to :manager, class_name: 'Employee', optional: true\nend\n\n# Migration\nadd_reference :employees, :manager, foreign_key: { to_table: :employees }\n</code></pre>"},{"location":"rails/models/association_relationships#composite-primary-key","title":"Composite Primary Key","text":"<pre><code>class Author &lt; ApplicationRecord\n  self.primary_key = [:first_name, :last_name]\n  has_many :books, query_constraints: [:first_name, :last_name]\nend\n\nclass Book &lt; ApplicationRecord\n  belongs_to :author, query_constraints: [:author_first_name, :author_last_name]\nend\n</code></pre>"},{"location":"rails/models/association_relationships#single-table-inheritance-sti","title":"Single Table Inheritance (STI)","text":"<ul> <li>To share fields and behavior between different models</li> <li>For example, we want to share color and price fields in Car, Bike, Bus<ul> <li>Create vehicles table with 'type' column</li> <li>type column will store the name of the entity like Car, Bike, or Bus</li> </ul> </li> </ul> <pre><code>class Vehicle &lt; ApplicationRecord\nend\n\nclass Car &lt; Vehicle\nend\n\n# There will be only one table 'vehicles', Car objects will be stored in the same\n# Will be saved to vehicles tables with type = 'Car' and the mentioned details\nCar.create(color: 'Red', price: 10000)\n</code></pre>"},{"location":"rails/models/association_relationships#delegate-type","title":"Delegate Type","text":"<ul> <li>STI can bloat the vehicles table</li> <li>Columns specific to Car will need to be included in the same table</li> <li>This can be solved by using delegated type</li> </ul> <pre><code>module VehicleEntity\n  extend ActiveSupport::Concern\n\n  included do\n    has_one :vehicle, as: :vehicle_entity, touch: true\n  end\nend\n\nclass Vehicle &lt; ApplicationRecord\n  delegated_type :vehicle_entity, types: %w[Car Bike], dependent: :destroy\nend\n\nclass Car &lt; ApplicationRecord\n  include VehicleEntity\nend\n</code></pre>"},{"location":"rails/models/association_methods_and_scopes","title":"Association Methods","text":"<pre><code># belongs_to and has_one\nauthor\nauthor = (objects)\nbuild_author({...}) # Used to initialize a new author object\ncreate_author({...})\ncreate_author!({...})\nreload_author\nreset_author\n\n# belongs_to\nauthor_changed?\nauthor_previously_changed?\n\n# has_many, has_and_belongs_to_many\nbooks\nbooks &lt;&lt; (object, ...)\nbooks.delete(object, ...)\nbooks.destroy(object, ...)\nbooks = (objects)\nbook_ids\nbook_ids = (ids)\nbooks.clear\nbooks.empty?\nbooks.size\nbooks.find(...)\nbooks.where(...)\nbooks.exists?(...)\nbooks.build({...}) # Used to initialize new book objects\nbooks.create({...})\nbooks.create!({...})\nbooks.reload\n</code></pre>"},{"location":"rails/models/association_methods_and_scopes#dependent-options","title":"Dependent Options","text":"<ul> <li>destroy</li> <li>delete</li> <li>destroy_async</li> <li>nullify</li> <li>restrict_with_exception</li> <li>restrict_with_error</li> </ul> <pre><code>has_many :books, dependent: :destroy\n</code></pre>"},{"location":"rails/models/association_methods_and_scopes#controlling-caching","title":"Controlling Caching","text":"<ul> <li>All the association methods are built around caching</li> <li>It keeps the result of most recent query available for further optimizations</li> <li>The cache is even shared across methods</li> <li>Call reload on the association to discard the cache</li> </ul> <pre><code>author.books.load # retrieves books from the database\nauthor.books.size # uses the cached copy of books\nauthor.books.empty? # uses the cached copy of books\nauthor.books.reload.empty? # discards the cached copy of books\n</code></pre>"},{"location":"rails/models/association_methods_and_scopes#association-scope","title":"Association Scope","text":"<pre><code># Models within different Modules\nmodule Business\n  class Supplier &lt; ApplicationRecord\n    has_one :account, class_name: 'Billing::Account'\n  end\nend\n\nmodule Billing\n  class Account &lt; ApplicationRecord\n    belongs_to :supplier, class_name: 'Business::Supplier'\n  end\nend\n\n# Custom Foreign Key\nclass Book &lt; ApplicationRecord\n  belongs_to :writer, class_name: 'Author', foreign_key: 'author_id'\nend\n\nclass Author &lt; ApplicationRecord\n  has_many :books, inverse_of: 'writer'\nend\n\n# Customize Query\nclass Book &lt; ApplicationRecord\n  belongs_to :author, -&gt; { where(active: true) }\nend\n\nclass Chapter &lt; ApplicationRecord\n  # Author belongs to Book\n  # Not required if author was immediate association\n  # Because they are eager-loaded automatically when needed\n  belongs_to :book, -&gt; { includes(:author) }\nend\n</code></pre>"},{"location":"rails/models/query_interface_1","title":"Query Interface 1","text":""},{"location":"rails/models/query_interface_1#retrieve-object","title":"Retrieve Object","text":"<pre><code>Customer.find(id) # Raises error if not found\nCustomer.find(ids)\nCustomer.first # last\nCustomer.find_by(attributes)\nCustomer.find_by!(attributes) # Raises error if not found\nCustomer.where(attributes).first\n</code></pre>"},{"location":"rails/models/query_interface_1#retrieve-multiple-objects","title":"Retrieve Multiple Objects","text":"<ul> <li>When it's required to iterate over a large set of records<ul> <li>Using <code>Customer.where(...).each</code> may seem straightforward</li> <li>But it becomes impractical as the table size increases</li> </ul> </li> <li>This is because it instructs Active Record to fetch the entire data in single pass<ul> <li>Build a model object per row</li> <li>Keep the entire array of objects in memory</li> <li>May exceed the amount of memory available</li> </ul> </li> <li>Rails provides two methods to address this: find_each, find_in_batches<ul> <li>This divides records into memory friendly batches for processing</li> </ul> </li> </ul> <pre><code># Find Each\n# Retrieves records in batches and then yields each one to the block\nCustomer.where(weekly_subscriber: true).find_each do |customer|\n  NewsMailer.weekly(customer).deliver_now\nend\n\nfind_each(batch_size: 5000)\nfind_each(start: 2000) # First ID\nfind_each(start: 2000, finish: 10000) # First &amp; last ID\nfind_each(order: :desc)\n\n# Find in Batches\n# Similar to find_each, but it yields batches to the block as an array of model\n# Give add_customers an array of 1000 recently active customers at a time\nCustomer.recently_active.find_in_batches do |customers|\n  export.add_customers(customers)\nend\n\nfind_in_batches(batch_size: 5000)\nfind_in_batches(start: 2000) # First ID\nfind_in_batches(start: 2000, finish: 10000) # First &amp; last ID\n</code></pre>"},{"location":"rails/models/query_interface_1#conditions","title":"Conditions","text":"<ul> <li>Building conditions as pure strings can be vulnerable to SQL injection<ul> <li>For example, <code>Book.where('title LIKE '%#{params[:title]}%'')</code> is not safe</li> <li>The preferred way to handle conditions is using rails conditions</li> </ul> </li> </ul> <pre><code># Array Conditions\nBook.where('title = ? AND out_of_print = ?', params[:title], false)\n# Placeholder Conditions\nBook.where(\n  'created_at &gt;= :start_date AND created_at &lt;= :end_date',\n  start_date: params[:start_date], end_date: params[:end_date]\n)\n# Sanitizing Conditions (Required for wild cards like '%')\nBook.where('title LIKE ?', Book.sanitize_sql_like(params[:title]) + '%')\n\n## Hash Conditions\nBook.where(out_of_print: true)\nAuthor.joins(:books).where(books: { author: author })\nBook.where([:author_id, :id] =&gt; [[15, 1], [15, 2]])\nBook.where(created_at: (Time.now.midnight - 1.day)..Time.now.midnight)\nCustomer.where(orders_count: [1, 3, 5])\n\n# Multiple Conditions\nCustomer.where(last_name: 'Smith', orders_count: [1, 3, 5])\nCustomer.where(last_name: 'Smith').where(orders_count: [1, 3, 5])\n\n# Logical Conditions\nCustomer.where.not(orders_count: [1, 3, 5]) # nil values won't be returned\nCustomer.where(last_name: 'Smith').or(Customer.where(orders_count: [1, 3, 5]))\nCustomer.where(id: [1, 2]).and(Customer.where(id: [2, 3]))\n</code></pre>"},{"location":"rails/models/query_interface_1#query-operations","title":"Query Operations","text":"<pre><code># Order\nBook.order(title: :asc, created_at: :desc)\nBook.order(:title, created_at: :desc) # asc by default\nBook.order('title ASC, created_at DESC')\nBook.order('title ASC', 'created_at DESC')\n\n# Select\nBook.select(:isbn, :out_of_print)\nBook.select('isbn, out_of_print')\nBook.select(:title).distinct\n\n# Limit\nCustomer.limit(5)\nCustomer.limit(5).offset(30)\n\n# Group\nOrder.group(:status).count\nOrder.select('created_at').group('created_at')\n\n# Having\nOrder.group('created_at').having('sum(total) &gt; ?', 200)\nOrder.select('created_at, sum(total) as total_price')\n     .group('created_at')\n     .having('sum(total) &gt; ?', 200)\n\n# Null Relation\n# Returns a chainable relation with no records\n# Useful where a Active Record relation is required for further operations\nBook.none\n\n# Read-only Objects\nCustomer.readonly.first\n</code></pre>"},{"location":"rails/models/query_interface_1#find-or-build","title":"Find or Build","text":"<pre><code>customer = Customer.find_or_initialize_by(first_name: 'Nina')\ncustomer.persisted? # false\ncustomer.new_record? # true\ncustomer.save # true\n\ncustomer = Customer.find_or_create_by(first_name: 'Andy')\ncustomer = Customer.find_or_create_by!(first_name: 'Andy')\n\n# If an attribute (say 'locked') should not be included in the query\n# But should be assigned if a new record is created\nCustomer.create_with(locked: false).find_or_create_by(first_name: 'Andy')\nCustomer.find_or_create_by(first_name: 'Andy') { |c| c.locked = false }\n</code></pre>"},{"location":"rails/models/query_interface_1#calculations","title":"Calculations","text":"<pre><code>Customer.count\nCustomer.where(first_name: 'Ryan').count\nCustomer.includes(:orders).where(first_name: 'Ryan', orders: { status: 'shipped' }).count\n\nOrder.average(\"subtotal\")\nOrder.minimum(\"subtotal\")\nOrder.maximum(\"subtotal\")\nOrder.sum(\"subtotal\")\n</code></pre>"},{"location":"rails/models/query_interface_1#existence-of-objects","title":"Existence of Objects","text":"<pre><code>Customer.exists?(1) # SELECT 1 FROM customers WHERE id = 1 LIMIT 1\nCustomer.exists?(id: [1, 2, 3])\nCustomer.exists?(first_name: ['Jane', 'Sergei'])\nCustomer.where(first_name: 'Ryan').exists?\n\nOrder.any? # SELECT 1 FROM orders LIMIT 1\nOrder.shipped.any?\nBook.where(out_of_print: true).any?\nCustomer.first.orders.any?\n\nOrder.many? # SELECT COUNT(*) FROM (SELECT 1 FROM orders LIMIT 2)\nOrder.shipped.many?\nBook.where(out_of_print: true).many?\nCustomer.first.orders.many?\n</code></pre>"},{"location":"rails/models/query_interface_1#explain","title":"Explain","text":"<ul> <li>Returns query plan for a given query</li> </ul> <pre><code>Customer.where(id: 1).joins(:orders).explain\nCustomer.where(id: 1).includes(:orders).explain\nCustomer.where(id: 1).joins(:orders).explain(:analyze, :verbose)\n</code></pre>"},{"location":"rails/models/query_interface_2","title":"Query Interface 2","text":""},{"location":"rails/models/query_interface_2#finding-by-sql","title":"Finding by SQL","text":"<pre><code># Returns an array of objects\nCustomer.find_by_sql(\n  \"SELECT * FROM customers\n  INNER JOIN orders ON customers.id = orders.customer_id\n  ORDER BY customers.created_at desc\"\n)\n\n# Returns ActiveRecord::Result\n# Calling 'to_a' on the result will return an array of hashes\n# [{\"first_name\"=&gt;\"Rafael\", \"created_at\"=&gt;\"2012-11-10 23:23:45.281189\"}]\nCustomer.connection.select_all(\n  \"SELECT first_name, created_at FROM customers WHERE id = '1'\"\n).to_a\n\n# Select\n# Returns ActiveRecord objects, need to map to get original values\nCustomer.select(:id).map(&amp;:id)\nCustomer.select(:id, :first_name).map { |c| [c.id, c.first_name] }\nCustomer.select(:first_name, :last_name).map(&amp;:name) # name is a model method\n\n# Pluck\n# Selects and returns array of values (cannot be chained further)\nCustomer.pluck(:id, :first_name)\nBook.where(out_of_print: true).pluck(:id)\nOrder.distinct.pluck(:status)\nOrder.joins(:customer, :books).pluck('orders.created_at, customers.email, books.title')\n\nCustomer.pick(:id) # Short form for Customer.pluck(:id).first\nCustomer.ids\n</code></pre>"},{"location":"rails/models/query_interface_2#joining-tables","title":"Joining Tables","text":"<ul> <li>There are two joins available: joins, left_joins</li> </ul> <pre><code># Raw SQL Joins\nAuthor.joins(\"INNER JOIN books ON books.author_id = authors.id\n  AND books.out_of_print = FALSE\")\n\n# Single Joins\nBook.joins(:reviews)\nBook.joins(:author, :reviews)\n\n# Nested Joins\nBook.joins(reviews: :customer)\nAuthor.joins(books: [{ reviews: { customer: :orders } }, :supplier])\n\n# Conditions\nCustomer.joins(:orders).where(orders: { created_at: time_range }).distinct\nCustomer.joins(:orders).find_by(orders: { created_at: time_range }) # Gets first record\n\n# Left Join\nCustomer.left_joins(:reviews).distinct\n        .select('customers.*, COUNT(reviews.*) AS reviews_count')\n        .group('customers.id')\n\n# Association Presence\n# Customers have at least one review\nCustomer.where.associated(:reviews)\n# Customers have no review\nCustomer.where.missing(:reviews)\n</code></pre>"},{"location":"rails/models/query_interface_2#locking-records","title":"Locking Records","text":"<ul> <li>Used to prevent race conditions when updating records in the database</li> <li>Ensures atomic updates</li> </ul>"},{"location":"rails/models/query_interface_2#optimistic-locking","title":"Optimistic Locking","text":"<ul> <li>Allows multiple users to access the same record for edits<ul> <li>Checks if another process has made changes since the record was open</li> <li>If so, the update is ignored by raising stale object error</li> </ul> </li> <li>To use this locking, table needs to have <code>lock_version</code> column of type integer<ul> <li>It's incremented each time the record is updated</li> <li>If an update request is made with a lower value than current lock_version<ul> <li>The update request fails with stale object error</li> </ul> </li> </ul> </li> </ul> <pre><code>c1 = Customer.find(1)\nc2 = Customer.find(1)\n\nc1.first_name = \"Sandra\"\nc1.save\n\nc2.first_name = \"Michael\"\nc2.save # Raises an ActiveRecord::StaleObjectError\n</code></pre>"},{"location":"rails/models/query_interface_2#pessimistic-locking","title":"Pessimistic Locking","text":"<ul> <li>Uses a locking mechanism provided by underlying database</li> <li>An exclusive lock is obtained on selected rows using <code>lock</code></li> <li>Relations using <code>lock</code> are usually wrapped in a transaction to prevent deadlock</li> </ul> <pre><code>Book.transaction do\n  book = Book.lock.first\n  book.title = 'Algorithms'\n  book.save!\nend\n# Equivalent SQL\n# BEGIN\n#   SELECT * FROM books LIMIT 1 FOR UPDATE\n#   UPDATE books SET updated_at = '2009-02-07 18:05:56', title = 'Algorithms'\n#   WHERE id = 1\n# COMMIT\n\n# If there is already an instance\nbook = Book.first\nbook.with_lock do\n  # This block is called within a transaction\n  book.increment!(:views)\nend\n\n# Can also pass raw SQL to the lock method for different types of locks\nBook.transaction do\n  book = Book.lock(\"LOCK IN SHARE MODE\").find(1)\n  book.increment!(:views)\nend\n</code></pre>"},{"location":"rails/models/query_interface_2#scopes","title":"Scopes","text":"<ul> <li>Used to specify commonly used queries in method calls</li> <li>All scope bodies should return ActiveRecord::Relation or nil to allow further chaining<ul> <li>That's why scopes are preferred over class methods</li> </ul> </li> </ul> <pre><code>class Book &lt; ApplicationRecord\n  scope :out_of_print, -&gt; { where(out_of_print: true) }\n  scope :out_of_print_and_expensive, -&gt; { out_of_print.where(\"price &gt; 500\") }\n  scope :costs_more_than, -&gt;(amount) { where(\"price &gt; ?\", amount) }\n  scope :created_before, -&gt;(time) { where(created_at: ...time) if time.present? }\nend\n\nBook.out_of_print\nBook.out_of_print.costs_more_than(500)\nBook.in_print.merge(Book.out_of_print)\nBook.in_print.joins(:author).merge(Author.active)\n\n# Default Scope\nclass Book &lt; ApplicationRecord\n  default_scope { where(out_of_print: false) }\nend\n\nBook.all # Applies default scope\nBook.unscoped.all # To skip default scope\nBook.new # Applies out_of_print = false by default\nBook.unscoped.new # To skip the default scope value\n</code></pre>"},{"location":"rails/models/query_interface_2#enums","title":"Enums","text":"<ul> <li>Defines an array of values allowed for an attribute</li> <li>Creates scopes and instance methods to get, set &amp; query values</li> </ul> <pre><code>class Order &lt; ApplicationRecord\n  enum :status, [:shipped, :being_packaged, :complete, :cancelled]\nend\n\nOrder.shipped\nOrder.not_shipped\norder.shipped?\norder.complete?\norder.shipped!\n</code></pre>"},{"location":"rails/models/query_interface_3","title":"Query Interface 3","text":""},{"location":"rails/models/query_interface_3#eager-loading","title":"Eager Loading","text":"<ul> <li>Mechanism for loading associated records using as few queries as possible</li> <li>These mechanisms store the associated data in the form of rails objects<ul> <li>Joins do not store the associated data for future use</li> <li>Joins may also give duplicate records</li> <li>Joins do not provide associated data in rails objects</li> </ul> </li> </ul> <pre><code># N + 1 Queries Problem\n# This executes 1 query to get books and one extra query per book to get author\n# So 11 queries in total\nBook.limit(10).map do |book|\n  book.author.last_name\nend\n</code></pre>"},{"location":"rails/models/query_interface_3#includes","title":"Includes","text":"<ul> <li>Generates two queries, one for the model and one for the relation</li> <li>If where is used, then it generates one query using left join</li> <li>If where is used with raw sql, then <code>references</code> should be used to force join</li> </ul> <pre><code># SELECT books.* FROM books LIMIT 10\n# SELECT authors.* FROM authors WHERE authors.id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nBook.includes(:author).limit(10).map do |book|\n  book.author.last_name\nend\n\nCustomer.includes(:orders, :reviews)\nCustomer.includes(orders: { books: [:supplier, :author] }).find(1)\n\n# Conditions\n# If there is a where condition, it generates a left join query\n# SELECT authors.id AS t0_r0 ... books.updated_at AS t1_r5 FROM authors\n# LEFT OUTER JOIN books ON books.author_id = authors.id\n# WHERE (books.out_of_print = 1)\nAuthor.includes(:books).where(books: { out_of_print: true })\n\n# Conditions with SQL fragments\n# Generates two queries, one for authors and one for books\nAuthor.includes(:books).where(\"books.out_of_print = true\")\n# If there is raw sql, we need to used `references` to force joined tables\nAuthor.includes(:books).where(\"books.out_of_print = true\").references(:books)\n</code></pre>"},{"location":"rails/models/query_interface_3#preload","title":"Preload","text":"<ul> <li>Loads each specified association using one query per association</li> <li>Not possible to specify conditions for preloaded associations</li> </ul> <pre><code># SELECT books.* FROM books LIMIT 10\n# SELECT authors.* FROM authors WHERE authors.id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nBook.preload(:author).limit(10).map do |book|\n  book.author.last_name\nend\n\n# Will raise error\nAuthor.preload(:books).where(books: { out_of_print: true })\n</code></pre>"},{"location":"rails/models/query_interface_3#eager-load","title":"Eager Load","text":"<ul> <li>Loads all specified associations using left join</li> <li>Can specify conditions (like includes)</li> </ul> <pre><code># SELECT DISTINCT books.id FROM books\n# LEFT OUTER JOIN authors ON authors.id = books.author_id\n# LIMIT 10\n\n# SELECT books.id AS t0_r0, books.last_name AS t0_r1, ... FROM books\n# LEFT OUTER JOIN authors ON authors.id = books.author_id\n# WHERE books.id IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nBook.eager_load(:author).limit(10).map do |book|\n  book.author.last_name\nend\n</code></pre>"},{"location":"rails/models/query_interface_3#strict-loading","title":"Strict Loading","text":"<ul> <li>Used to make sure no associations are lazy loaded</li> </ul> <pre><code>user = User.strict_loading.first\n\nuser = User.first\nuser.strict_loading!\n\nuser.address.city # raises an ActiveRecord::StrictLoadingViolationError\nuser.comments.to_a # raises an ActiveRecord::StrictLoadingViolationError\n</code></pre>"},{"location":"rails/models/active_support","title":"Active Support","text":"<ul> <li>Provides extension methods to ruby libraries and classes</li> </ul> <pre><code># Variable\nblank?\npresent?\npresence # a.present? ? a : nil\nin?(array)\ndup\ndeep_dup\ntry(:method)\n# hash.try(:[], :key)\n# person.try { |x| ... }\nto_param # Converts string, array, hash to url params\n\n# Array\nincluding(items)\nexcluding(items)\n\n# Object\nto_json\nindex_by(block) # Generates a hash with the returned item as values\nindex_with(block) # Generates a hash with the returned item as keys\npluck(keys)\nstringify_keys\nstringify_keys!\nsymbolize_keys\nsymbolize_keys!\nexcept(keys)\n\n# String\nsquish # Strips whitespaces and removes multiple whitespaces\ntruncate(10) # Replaces long text with ...\nconstantize\nsingularize\npluralize\ntitleize\ncamelcase\nunderscore\nhumanize\nto_sentence\nhtml_safe?\nhtml_safe\nto_date\nto_time\nto_datetime\n\n# Class &amp; Modules\ndelegate :name, to: :profile\nalias_attribute\n\n# Date\ncurrent\nbeginning_of_week\nend_of_week\nmonday\nnext_week\nprev_week\nweeks_ago(num)\nweeks_since(num)\n</code></pre>"},{"location":"rails/controllers/routes","title":"Routes","text":""},{"location":"rails/controllers/routes#router","title":"Router","text":"<ul> <li>Recognizes URLs and dispatches them to a controller's action or to a rack application</li> <li>Generates paths and URLs to avoid hardcoding strings in views</li> <li>Routes are defined in 'config/routes.rb'</li> <li>Use <code>rails routes</code> to get info about all the routes</li> </ul> <pre><code># config/routes.rb\nRails.application.routes.draw do\n  # GET /patients/17\n  # Request is dispatched to the patients controller's show action\n  # With { id: '17' } in params\n  # It can also generate path which can be used in links\n  # &lt;%= link_to 'Patient Record', patient_path(@patient) %&gt;\n  get '/patients/:id', to: 'patients#show'\nend\n</code></pre>"},{"location":"rails/controllers/routes#resourceful-routes","title":"Resourceful Routes","text":"<ul> <li>Quickly declares all the common routes for a given resourceful controller<ul> <li>Methods with '_path' suffix gives path like '/photos'</li> <li>Methods with '_url' suffix gives url like 'http://localhost:3000/photos'</li> </ul> </li> <li>Declaring <code>resources :photos</code> defines these routes (and matched in given order)<ul> <li><code>GET /photos</code> (action: photos#index, path: photos_path)</li> <li><code>GET /photos/new</code> (action: photos#new, path: new_photo_path)</li> <li><code>POST /photos</code> (action: photos#create)</li> <li><code>GET /photos/:id</code> (action: photos#show, path: photo_path)</li> <li><code>GET /photos/:id/edit</code> (action: photos#edit, path: edit_photo_path)</li> <li><code>PATCH/PUT /photos/:id</code> (action: photos#update)</li> <li><code>DELETE /photos/:id</code> (action: photos#destroy)</li> </ul> </li> <li>Declaring singular resource <code>resource :photo</code><ul> <li><code>GET /photo/new</code> (action: photos#new, path: new_photo_path)</li> <li><code>POST /photo</code> (action: photos#create)</li> <li><code>GET /photo</code> (action: photos#show, path: photo_path)</li> <li><code>GET /photo/edit</code> (action: photos#edit, path: edit_photo_path)</li> <li><code>PATCH/PUT /photo</code> (action: photos#update)</li> <li><code>DELETE /photo</code> (action: photos#destroy)</li> </ul> </li> </ul>"},{"location":"rails/controllers/routes#nested-routes","title":"Nested Routes","text":"<ul> <li>It is recommended to not nest more than one resource</li> <li>Nesting many resources makes it cumbersome to manage routes &amp; paths</li> </ul> <pre><code># ArticlesController\n# Routes are nested under magazine element\n# /magazines/:magazine_id/articles\n# Path will be like magazine_articles_path, edit_magazine_article_path\nresources :magazines do\n  resources :articles\nend\n\n# Shallow Nesting\nresources :articles do\n  resources :comments, only: [:index, :new, :create]\nend\nresources :comments, only: [:show, :edit, :update, :destroy]\n\n# Short form for the shallow nesting\nresources :articles do\n  resources :comments, shallow: true\nend\n\n# Will shallow nest all the defined resources inside articles\nresources :articles, shallow: true do\n  resources :comments\n  resources :quotes\nend\n</code></pre>"},{"location":"rails/controllers/routes#namespaces","title":"Namespaces","text":"<pre><code># Admin::ArticlesController\n# Routes are prefixed: /admin/articles\nnamespace :admin do\n  resources :articles, :comments\nend\n\n# Admin::ArticlesController\n# Routes are NOT prefixed: /articles\nscope module: 'admin' do\n  resources :articles, :comments\nend\n\nresources :articles, module: 'admin'\n\n# ArticlesController\n# Routes are prefixed: /admin/articles\nscope '/admin' do\n  resources :articles, :comments\nend\n\n# ArticlesController\n# Routes are prefixed: /admin/articles\nresources :articles, path: '/admin/articles'\n</code></pre>"},{"location":"rails/controllers/routes#custom-actions","title":"Custom Actions","text":"<pre><code>resources :photos do\n  member do\n    # /photos/1/preview\n    # params[:id]\n    # preview_photo_path\n    get 'preview'\n  end\n\n  collection do\n    # /photos/search\n    # search_photos_path\n    get 'search'\n  end\n\n  get 'preview', on: :member\n  get 'search', on: :collection\n\n  # /comments/new/preview\n  # preview_new_comment_path\n  get 'preview', on: :new\nend\n\nresources :photos do\n  # /photos/1/preview\n  # params[:photo_id]\n  # photo_preview_path\n  get 'preview'\nend\n</code></pre>"},{"location":"rails/controllers/routes#url-helpers","title":"URL Helpers","text":"<ul> <li>If the argument is an object of a model, it can identify path automatically</li> </ul> <pre><code>&lt;%= link_to 'Ad details', magazine_ad_path(@magazine, @ad) %&gt;\n&lt;%= link_to 'Ad details', url_for([@magazine, @ad]) %&gt;\n&lt;%= link_to 'Ad details', [@magazine, @ad] %&gt;\n&lt;%= link_to 'Magazine details', @magazine %&gt;\n&lt;%= link_to 'Edit Ad', [:edit, @magazine, @ad] %&gt;\n</code></pre>"},{"location":"rails/controllers/routes#non-resourceful-routes","title":"Non-Resourceful Routes","text":"<pre><code>root to: 'pages#main'\nroot 'pages#main' # shortcut for the above\n\n# Routes both /photos &amp; /photos/:id to display action, id is optional parameter\nget 'photos(/:id)', to: 'photos#display'\nget 'photos/:id/:user_id', to: 'photos#show'\nget 'photos/:id/with_user/:user_id', to: 'photos#show'\nget '/stories/:name', to: redirect('/articles/%{name}')\n\n# Default params\n# Sets params[:format] = 'jpg'\nget 'photos/:id', to: 'photos#show', defaults: { format: 'jpg' }\n\n# Wildcard segments\n# books/some/section/title-of-book, params[:section] = 'some/section'\nget 'books/*section/:title', to: 'books#show'\n</code></pre>"},{"location":"rails/controllers/routes#concerns","title":"Concerns","text":"<ul> <li>Declares common routes that can be reused inside other resources &amp; routes</li> </ul> <pre><code>concern :commentable do\n  resources :comments\nend\n\nconcern :image_attachable do\n  resources :images, only: :index\nend\n\n# This is equivalent to nested resources\n# resources :messages do\n#   resources :comments\n# end\nresources :messages, concerns: :commentable\nresources :articles, concerns: [:commentable, :image_attachable]\n\n# Can be used in namespaces &amp; scopes as well\nnamespace :articles do\n  concerns :commentable\nend\n</code></pre>"},{"location":"rails/controllers/controllers","title":"Controllers","text":"<ul> <li>After the router has determined which controller to use for a request<ul> <li>Controller makes sense of the request and produces appropriate output</li> </ul> </li> <li>Makes the model data available to the view<ul> <li>To display data to the user or save the user data to the model</li> </ul> </li> <li>Plural names are used for file &amp; class names<ul> <li>'ClientsController' class in 'clients_controller.rb' file</li> </ul> </li> <li><code>controller_name</code> &amp; <code>action_name</code> methods can be used to get routing info</li> <li>ApplicationController is inherited to individual controllers</li> </ul> <pre><code>class ClientsController &lt; ApplicationController\n  # GET /clients?status=activated\n  def index\n    if params[:status] == \"activated\"\n      @clients = Client.activated\n    else\n      @clients = Client.inactivated\n    end\n  end\n\n  # POST /clients, data will be sent as part of the request body\n  def create\n    @client = Client.new(params[:client])\n    if @client.save\n      redirect_to @client\n    else\n      render \"new\" # Overrides the default rendering of 'create' view\n    end\n  end\nend\n</code></pre>"},{"location":"rails/controllers/controllers#parameters","title":"Parameters","text":"<ul> <li><code>params</code> is used to access data including URL params &amp; POST data</li> <li>URL params: params[:id] will contain id specified in /photos/:id</li> <li>POST data: Data sent in query string (everything after '?' in the url)</li> </ul>"},{"location":"rails/controllers/controllers#nested-params","title":"Nested Params","text":"<ul> <li>Array<ul> <li><code>GET /clients?ids[]=1&amp;ids[]=2&amp;ids[]=3</code></li> <li>params[:ids] will be ['1', '2', '3']</li> </ul> </li> <li>Hash<ul> <li><code>&lt;input type=\"text\" name=\"client[address][city]\" value=\"Carrot City\"/&gt;</code></li> <li>params[:address] will be { \"city\" =&gt; \"Carrot City\" }</li> </ul> </li> </ul>"},{"location":"rails/controllers/controllers#strong-params","title":"Strong Params","text":"<ul> <li>Action Controller params are forbidden to be used in Active Model mass assignments</li> <li>They should be permitted first to be used, required params can also be specified</li> </ul> <pre><code># Will raise an error\nPerson.create(params[:person])\n\nperson_params = params.require(:person).permit(:name, :age)\n# To permit the entire hash or parameters\nperson_params = params.require(:person).permit!\n# To permit nested params\nparams.require(:product).permit(:name, data: {}) # permits name &amp; whole data attribute\nparams.permit(:name, { emails: [] }, friends: [:name, { family: [:name] }])\n# Using `fetch` you can supply a default\nparams.fetch(:blog, {}).permit(:title, :author)\n</code></pre>"},{"location":"rails/controllers/controllers#filters","title":"Filters","text":"<ul> <li>Methods that run before, after or around a controller action</li> </ul> <pre><code>class ApplicationController &lt; ActionController::Base\n  before_action :require_login\n\n  private\n\n    def require_login\n      return if logged_in?\n      flash[:error] = \"You must be logged in to access this section\"\n      redirect_to new_login_url\n    end\nend\n\nclass LoginsController &lt; ApplicationController\n  before_action :do_something, only: [:action1, :action2]\n  after_action :do_something_else, except: [:action1, :action2]\n  skip_before_action :require_login, only: [:new, :create]\nend\n\nclass ChangesController &lt; ApplicationController\n  around_action :wrap_in_transaction, only: :show\n\n  private\n    def wrap_in_transaction\n      ActiveRecord::Base.transaction do\n        yield\n      end\n    end\nend\n</code></pre>"},{"location":"rails/controllers/controllers#streaming-and-file-downloads","title":"Streaming and File Downloads","text":"<ul> <li><code>send_data</code> is used to send file data</li> <li><code>send_file</code> is used to send an existing file on the disk</li> <li>To turn off streaming 'stream' option is used</li> <li>To adjust block size 'buffer_size' option is used</li> </ul> <pre><code>require \"prawn\"\nclass ClientsController &lt; ApplicationController\n  # Generates a PDF document and returns it as a string\n  # This string will then be streamed to the client as a file download\n  # If the file is not meant to be downloaded, convey it to browser\n  # By setting disposition: :inline (default value is :attachment)\n  def download_pdf\n    send_data(generate_pdf, filename: \"#{client.name}.pdf\", type: \"application/pdf\")\n  end\n\n  private\n    def generate_pdf\n      Prawn::Document.new do\n        text(client.name, align: :center)\n        text(\"Address: #{client.address}\")\n      end.render\n    end\nend\n\n# Using Format\nclass ClientsController &lt; ApplicationController\n  def show\n    respond_to do |format|\n      format.html\n      # GET /clients/1.pdf\n      format.pdf { render pdf: generate_pdf(client) }\n    end\n  end\nend\n\n# For live streaming, `ActionController::Live` module is included\nresponse.headers['Content-Type'] = 'text/event-stream'\nresponse.stream.write(text)`\n</code></pre>"},{"location":"rails/controllers/controllers#rescue-from","title":"Rescue From","text":"<ul> <li>Rails default exception handling displays 500 for all exceptions</li> <li>If there was a routing error or record was not found, it displays 404</li> <li>These messages are in 500.html &amp; 404.html of public folder<ul> <li>These can be customized but are static files (erb, scss, etc. cannot be used)</li> </ul> </li> <li>Do not use 'rescue_from' with Exception or StandardError<ul> <li>It can cause serious side-effects</li> <li>And prevents rails from handling exceptions properly</li> </ul> </li> </ul> <pre><code>class ApplicationController &lt; ActionController::Base\n  rescue_from User::NotAuthorized, with: :user_not_authorized\n\n  private\n    def user_not_authorized\n      flash[:error] = \"You don't have access to this section.\"\n      redirect_back(fallback_location: root_path)\n    end\nend\n</code></pre>"},{"location":"rails/controllers/sessions_and_cookies","title":"Session and Cookies","text":""},{"location":"rails/controllers/sessions_and_cookies#session","title":"Session","text":"<ul> <li>The application has a session for each user<ul> <li>In which small amounts of data can be stored and persisted between requests</li> </ul> </li> <li>Available storage mechanism in the module ActionDispatch::Session::<ul> <li>CookieStore: Stores everything on the client</li> <li>CacheStore: Stores in rails cache</li> <li>ActiveRecordStore: Stores in a database using ActiveRecord (requires session_store gem)</li> </ul> </li> <li>All session stores use a cookie to store a unique ID for each session<ul> <li>Rails won't allow to pass session ID in URL as it is less secure</li> <li>This ID is used to look up the session data on the server (e.g. in db table)</li> </ul> </li> <li>Though the default &amp; recommended session store (which is CookieStore)<ul> <li>Stores all session data in the cookie itself</li> <li>This is very lightweight and requires no setup to use the session</li> <li>Cookie data is cyptographically signed &amp; encrypted to make it tamper-proof</li> <li>This is done using the secret_key_base in credentials</li> </ul> </li> <li>CookieStore can store around 4 kB of data<ul> <li>Much less than others but usually enough</li> <li>Storing large amounts of data in the session is discouraged in any type of session store</li> </ul> </li> <li>Sessions are lazily loaded</li> </ul> <pre><code>class LoginsController &lt; ApplicationController\n  def create\n    if user = User.authenticate(params[:username], params[:password])\n      session[:current_user_id] = user.id\n      redirect_to root_url\n    end\n  end\n\n  def destroy\n    session.delete(:current_user_id)\n    @_current_user = nil\n    redirect_to root_url, status: :see_other\n  end\nend\n\nclass ApplicationController &lt; ActionController::Base\n  private\n\n    def current_user\n      @_current_user ||= session[:current_user_id] &amp;&amp;\n        User.find_by(id: session[:current_user_id])\n    end\nend\n</code></pre>"},{"location":"rails/controllers/sessions_and_cookies#flash","title":"Flash","text":"<ul> <li>Special part of session which is cleared with each request</li> <li>It is only available in the next request<ul> <li>Useful for passing error message, etc.</li> </ul> </li> <li>If you want flash to be carried over to another request<ul> <li>Use <code>flash.keep</code> or <code>flash.keep(key)</code> before redirecting</li> </ul> </li> <li>If you want to use flash in the same request<ul> <li>Use <code>flash.now</code> like <code>flash.now[:error] = 'message'</code> before render</li> <li>For example, if create action fails and you render new action in the same request</li> </ul> </li> </ul> <pre><code>class LoginsController &lt; ApplicationController\n  def destroy\n    session.delete(:current_user_id)\n    flash[:notice] = \"You have successfully logged out.\"\n    redirect_to root_url, status: :see_other\n  end\nend\n\nredirect_to root_url, notice: \"You have successfully logged out.\"\nredirect_to root_url, alert: \"You're stuck here!\"\nredirect_to root_url, flash: { referral_code: 1234 }\n</code></pre> <pre><code>&lt;% flash.each do |name, msg| %&gt;\n  &lt;%= content_tag :div, msg, class: name %&gt;\n&lt;% end %&gt;\n\n&lt;% if flash[:just_signed_up] %&gt;\n  &lt;p class=\"welcome\"&gt;Welcome to our site!&lt;/p&gt;\n&lt;% end %&gt;\n</code></pre>"},{"location":"rails/controllers/sessions_and_cookies#cookies","title":"Cookies","text":"<ul> <li>Used to store small amounts of data on the client in cookies</li> <li>Persisted across requests and even sessions</li> </ul> <pre><code>class CommentsController &lt; ApplicationController\n  def new\n    @comment = Comment.new(author: cookies[:commenter_name])\n  end\n\n  def create\n    # ...\n    if params[:remember_name]\n      cookies[:commenter_name] = @comment.author\n    else\n      cookies.delete(:commenter_name)\n    end\n  end\nend\n\n# Encrypted Cookie Jar\nclass CookiesController &lt; ApplicationController\n  def set_cookie\n    cookies.encrypted[:expiration_date] = Date.tomorrow # Thu, 20 Mar 2014\n    redirect_to action: 'read_cookie'\n  end\n\n  def read_cookie\n    cookies.encrypted[:expiration_date] # \"2014-03-20\"\n  end\nend\n</code></pre>"},{"location":"rails/controllers/security","title":"Security","text":""},{"location":"rails/controllers/security#request-forgery-protection","title":"Request Forgery Protection","text":"<ul> <li>Cross-site request forgery is a type of attack<ul> <li>In which a site tricks a user into making requests on another site</li> <li>Possibly adding, modifying, or deleting data on that site</li> <li>Without the user's knowledge or permission</li> </ul> </li> <li>The first step to avoid this is to make sure that all destructive actions<ul> <li>That is, create, update, destroy can be accessed only with non-GET requests</li> </ul> </li> <li>A malicious site can still send a non-GET request to your site<ul> <li>That's where request forgery protection conmes in</li> <li>It adds a non-guessable token (which is only known to the server) to each request</li> </ul> </li> <li>Rails adds this token to every form generated using form helpers<ul> <li>For a manual form or custom Ajax calls<ul> <li>It's available through <code>form_authenticity_token</code></li> </ul> </li> </ul> </li> </ul> <pre><code>&lt;form accept-charset=\"UTF-8\" action=\"/users/1\" method=\"post\"&gt;\n    &lt;input\n        type=\"hidden\"\n        value=\"67250ab105eb5ad10851c00a5621854a23af5489\"\n        name=\"authenticity_token\"\n    /&gt;\n    &lt;!-- fields --&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"rails/controllers/security#http-authentications","title":"HTTP Authentications","text":"<ul> <li>Rails has three built-in HTTP authentication mechanisms<ul> <li>Basic Auth</li> <li>Digest Auth</li> <li>Token Auth</li> </ul> </li> </ul> <pre><code># Basic Auth\nclass AdminsController &lt; ApplicationController\n  http_basic_authenticate_with name: \"humbaba\", password: \"5baa61e4\"\nend\n\n# Digest Auth\nclass AdminsController &lt; ApplicationController\n  USERS = { \"lifo\" =&gt; \"world\" }\n  before_action :authenticate\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_digest do |username|\n        USERS[username]\n      end\n    end\nend\n\n# Token Auth\nclass PostsController &lt; ApplicationController\n  TOKEN = \"secret\"\n  before_action :authenticate\n\n  private\n    def authenticate\n      authenticate_or_request_with_http_token do |token, options|\n        ActiveSupport::SecurityUtils.secure_compare(token, TOKEN)\n      end\n    end\nend\n</code></pre>"},{"location":"rails/views/layout_and_rendering","title":"Layout and Rendering","text":""},{"location":"rails/views/layout_and_rendering#responses","title":"Responses","text":"<ul> <li>There are three ways to create HTTP responses<ul> <li>render: Renders a view</li> <li>redirect_to: Redirects to another path</li> <li>head: Sends only headers to the browsers</li> </ul> </li> <li>For BooksController and index action<ul> <li>A corresponding view should be present at 'app/views/books/index.html.erb'</li> <li>It's not required to explicitely render anything from controller</li> <li>Just the presence of action method &amp; this file will render it at the route</li> </ul> </li> </ul>"},{"location":"rails/views/layout_and_rendering#render","title":"Render","text":"<pre><code>def update\n  @book = Book.find(params[:id])\n  if @book.update(book_params)\n    redirect_to(@book)\n  else\n    render :edit, status: :unprocessable_entity\n  end\nend\n\n# To render views for products from books controller\nrender \"products/show\"\nrender template: \"products/show\"\n\n# Different Formats\nrender plain: \"OK\"\nrender json: @product\nrender xml: @product\nrender js: \"alert('Hello Rails');\"\nrender file: \"#{Rails.root}/public/404.html\", layout: false\n\n# Default content_type is 'text/html'\nrender template: \"feed\", content_type: \"application/rss\"\nrender layout: \"special_layout\"\nrender layout: false\n\nrender status: 500\nrender status: :forbidden\n\n# There should exist a template with the specified format\nrender formats: :xml\nrender formats: [:json, :xml]\n</code></pre>"},{"location":"rails/views/layout_and_rendering#redirect","title":"Redirect","text":"<pre><code>redirect_to photos_url\nredirect_back(fallback_location: root_path)\n\n# Alternatives\ndef show\n  @book = Book.find_by(id: params[:id])\n  if @book.nil?\n    # This will redirect to index and it will have to be rendered again\n    redirect_to action: :index\n\n    # A better option can be to handle the data here and render index directly\n    @books = Book.all\n    flash.now[:alert] = \"Your book was not found\"\n    render 'index'\n  end\nend\n</code></pre>"},{"location":"rails/views/layout_and_rendering#layouts","title":"Layouts","text":"<ul> <li>Rails combines the view with a layout</li> <li>Layout is a basic structure that needs to be rendered everywhere<ul> <li>For example, menu, navigation bar, headers, footers, etc</li> </ul> </li> <li>It provides a yield method where the view is required to render</li> <li>To yield specific sections, content_for is specified</li> </ul> <pre><code>// Layout\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;%= yield :head %&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;%= yield %&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n// View\n&lt;% content_for :head do %&gt;\n  &lt;title&gt;A simple page&lt;/title&gt;\n&lt;% end %&gt;\n&lt;p&gt;Hello, Rails!&lt;/p&gt;\n</code></pre>"},{"location":"rails/views/layout_and_rendering#layout-rendering","title":"Layout Rendering","text":"<ul> <li>To find the current layout, rails first looks in 'apps/views/layouts'</li> <li>For PhotosController, it will look for 'app/views/layouts/photos.html.erb'</li> <li>If not found, it will use 'app/views/layouts/application.html.erb'</li> </ul> <pre><code># To override default conventions for layout\n# They also cascade downward in hierarchy\nclass ProductsController &lt; ApplicationController\n  layout \"inventory\"\n  layout \"product\", only: [:index, :rss]\nend\n</code></pre>"},{"location":"rails/views/layout_and_rendering#partials","title":"Partials","text":"<ul> <li>Renders a partial view inside a view</li> </ul> <pre><code>&lt;%= render \"application/ad_banner\" %&gt;\n&lt;h1&gt;Products&lt;/h1&gt;\n&lt;%= render \"application/footer\" %&gt;\n\n// Passing variables\n&lt;h1&gt;Editing zone&lt;/h1&gt;\n&lt;%= render partial: \"form\", locals: { zone: @zone } %&gt;\n\n// Renders show page of customer\n&lt;%= render @customer %&gt;\n// Renders index page of articles\n&lt;%= render @articles %&gt;\n\n// Collection\n// Will render partial for each product\n&lt;h1&gt;Products&lt;/h1&gt;\n&lt;%= render partial: \"product\", collection: @products %&gt;\n</code></pre>"},{"location":"rails/views/form_helpers","title":"Form Helpers","text":""},{"location":"rails/views/form_helpers#forms","title":"Forms","text":"<pre><code>// Generic Form\n&lt;%= form_with url: \"/search\", method: :get do |form| %&gt;\n  &lt;%= form.label :query, \"Search for:\" %&gt;\n  &lt;%= form.text_field :query %&gt;\n  &lt;%= form.submit \"Search\" %&gt;\n&lt;% end %&gt;\n\n// Model Form: Create or update @article\n&lt;%= form_with model: @article do |form| %&gt;\n  &lt;%= form.text_field :title %&gt;\n  &lt;%= form.text_area :body, size: \"60x10\" %&gt;\n  &lt;%= form.submit %&gt;\n&lt;% end %&gt;\n\n// Handling Association: ContactDetail\n&lt;%= form_with model: @person do |person_form| %&gt;\n  &lt;%= person_form.text_field :name %&gt;\n  &lt;%= fields_for :contact_detail, @person.contact_detail do |contact_detail_form| %&gt;\n    &lt;%= contact_detail_form.text_field :phone_number %&gt;\n  &lt;% end %&gt;\n&lt;% end %&gt;\n\n// Handling Custom Route\nform_with(model: @article, url: article_path(@article), method: :patch)\n// Namespaces\nform_with(model: [:admin, @article])\n</code></pre>"},{"location":"rails/views/form_helpers#elements","title":"Elements","text":"<pre><code>&lt;%= form.text_area :message, size: \"70x5\" %&gt;\n&lt;%= form.hidden_field :parent_id, value: \"foo\" %&gt;\n&lt;%= form.password_field :password %&gt;\n&lt;%= form.number_field :price, in: 1.0..20.0, step: 0.5 %&gt;\n&lt;%= form.date_field :born_on %&gt;\n&lt;%= form.time_field :started_at %&gt;\n\n// Select\n&lt;%= form.select :city, [\"Berlin\", \"Chicago\", \"Madrid\"] %&gt;\n// To assign different values (Chicago will be label &amp; CHI will be value)\n&lt;%= form.select :city, [[\"Berlin\", \"BE\"], [\"Chicago\", \"CHI\"], [\"Madrid\", \"MD\"]] %&gt;\n&lt;%= form.select :city_id, City.order(:name).map { |city| [city.name, city.id] } %&gt;\n\n// Checkboxes\n&lt;%= form.check_box :pet_dog %&gt;\n&lt;%= form.label :pet_dog, \"I own a dog\" %&gt;\n&lt;%= form.check_box :pet_cat %&gt;\n&lt;%= form.label :pet_cat, \"I own a cat\" %&gt;\n\n// Radio Buttons\n&lt;%= form.radio_button :age, \"child\" %&gt;\n&lt;%= form.label :age_child, \"I am younger than 21\" %&gt;\n&lt;%= form.radio_button :age, \"adult\" %&gt;\n&lt;%= form.label :age_adult, \"I am over 21\" %&gt;\n</code></pre>"},{"location":"rails/components/action_mailer","title":"Action Mailer","text":"<ul> <li>Allows sending emails using mailer classes (app/mailers) and views (app/views)</li> <li>To generate user mailer, run 'rails g mailer User'</li> <li>Work very similar to controllers, inherits 'ActionMailer::Base'<ul> <li>Have actions and corresponding view</li> <li>Have action filters (before, after, around)_action</li> <li>Have delivery callbacks (before, after, around)_delivery</li> </ul> </li> <li>Mailer instances don't have any context about the request<ul> <li>So, *_path cannot be used inside an email</li> <li>Need to use *_url for links</li> </ul> </li> </ul> <pre><code># app/mailers/user_mailer.rb\nclass UserMailer &lt; ApplicationMailer\n  default from: 'notifications@example.com'\n\n  # Can also specify layout\n  # layout 'awesome'\n\n  def welcome_email\n    @user = params[:user]\n\n    mail(to: @user.email, subject: 'Welcome')\n    # To send name of the person\n    mail(to: email_address_with_name(@user.email, @user.name), subject: 'Welcome')\n    # Custom template path\n    mail(to: @user.email, subject: 'Welcome',\n      template_path: 'notifications', template_name: 'another')\n  end\n\n  end\nend\n\n# app/controllers/users_controller.rb\nclass UsersController &lt; ApplicationController\n  def create\n    # All attributes in 'with' are passed as params\n    # Will send mail async using 'deliver_later'\n    # Can use 'deliver_now' to send mail immediately\n    UserMailer.with(user: @user).welcome_email.deliver_later\n  end\nend\n</code></pre> <pre><code>// app/views/user_mailer/welcome_email.html.rb\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Welcome to example.com, &lt;%= @user.name %&gt;&lt;/h1&gt;\n    &lt;p&gt;\n      You have successfully signed up to example.com&lt;br&gt;\n      Your username is: &lt;%= @user.login %&gt;&lt;br&gt;\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"rails/components/action_mailer#attachments","title":"Attachments","text":"<pre><code># Will guess the mime_type and set the encoding (base64)\nattachments['filename.jpg'] = File.read('/path/to/filename.jpg')\n\n# Inline Attachements\nattachments.inline['image.jpg'] = File.read('/path/to/image.jpg')\n# Included in view like this\n# &lt;%= image_tag attachments['image.jpg'].url %&gt;\n</code></pre>"},{"location":"rails/components/action_mailer#previews","title":"Previews","text":"<ul> <li>Renders email in browser for testing, added in 'test/mailers/previews'</li> <li>Available at localhost:3000/rails/mailers/</li> </ul> <pre><code># test/mailers/previews/user_mailer_preview.rb\nclass UserMailerPreview &lt; ActionMailer::Preview\n  def welcome_email\n    UserMailer.with(user: User.first).welcome_email\n  end\nend\n</code></pre>"},{"location":"rails/components/action_mailer#intercepting-emails","title":"Intercepting Emails","text":"<ul> <li>Makes modifications to emails before they are handed off to delivery agents</li> <li>Useful to avoid sending to actual emails in staging environment</li> </ul> <pre><code>class SandboxEmailInterceptor\n  def self.delivering_email(message)\n    message.to = ['sandbox@example.com']\n  end\nend\n\nRails.application.configure do\n  if Rails.env.staging?\n    config.action_mailer.interceptors = %w[SandboxEmailInterceptor]\n  end\nend\n</code></pre>"},{"location":"rails/components/action_mailer#observing-emails","title":"Observing Emails","text":"<ul> <li>Gives access to email message after it has been sent</li> </ul> <pre><code>class EmailDeliveryObserver\n  def self.delivered_email(message)\n    EmailDelivery.log(message)\n  end\nend\n\nRails.application.configure do\n  config.action_mailer.observers = %w[EmailDeliveryObserver]\nend\n</code></pre>"},{"location":"rails/components/active_job","title":"Active Job","text":"<ul> <li>Framework for declaring jobs and run them on queuing backends</li> <li>These jobs can be for scheduled clean-ups, billing charges, mailings, etc.</li> <li>To create a job, run 'rails g job guests_cleanup'<ul> <li>Can pass also pass queue name like '--queue urgent'</li> <li>Creates the file in 'app/jobs' and inherits 'ApplicationJob'</li> </ul> </li> <li>For enqueuing and executing jobs in product, a queuing backend needs to be set up<ul> <li>Rails itself only provides an in-process queuing system (kept in RAM)</li> <li>If the process crashes or the machine is reset, all the jobs are lost</li> <li>ActiveJob has built-in adapters for Sidekiq, Resque, DelayedJob, etc.</li> <li>So specify a third party queuing library in config/application.rb</li> <li>And setup its queuing service since jobs run in parallel</li> </ul> </li> </ul> <pre><code>class GuestsCleanupJob &lt; ApplicationJob\n  queue_as :default\n\n  def perform(*guests)\n    # Do something later\n  end\nend\n\n# Enqueue a job to be performed as soon as the queuing system is free\nGuestsCleanupJob.perform_later(guest)\n# Enqueue a job to be performed tomorrow at noon\nGuestsCleanupJob.set(wait_until: Date.tomorrow.noon).perform_later(guest)\n# Enqueue a job to be performed 1 week from now\nGuestsCleanupJob.set(wait: 1.week).perform_later(guest)\n# `perform_now` and `perform_later` will call `perform` under the hood\nGuestsCleanupJob.perform_later(guest1, guest2, filter: 'some_filter')\n# Specify queue dynamically\nGuestsCleanupJob.set(queue: :another_queue).perform_later(record)\n</code></pre>"},{"location":"rails/components/active_job#callbacks","title":"Callbacks","text":"<ul> <li>(before, around, after)_enqueue</li> <li>(before, around, after)_perform</li> </ul> <pre><code>class GuestsCleanupJob &lt; ApplicationJob\n  queue_as :default\n\n  around_perform :around_cleanup\n\n  def perform\n    # Do something later\n  end\n\n  private\n    def around_cleanup\n      # Do something before perform\n      yield\n      # Do something after perform\n    end\nend\n</code></pre>"},{"location":"rails/components/action_cable","title":"Action Cable","text":"<ul> <li>Integrates web sockets and allows real-time features</li> <li>Uses web sockets instead of HTTP request-response protocol</li> </ul>"},{"location":"rails/components/action_cable#components","title":"Components","text":"<ul> <li>Connections<ul> <li>An action cable server handles multiple connection instances</li> <li>It has one connection instance per web socket connection</li> <li>A single user may have multiple web sockets through multiple browser tabs</li> </ul> </li> <li>Consumers<ul> <li>Client of a web socket connection created by client-side JS framework</li> </ul> </li> <li>Channels<ul> <li>Each channel encapsulates a logical unit of work (similar to controller in MVC)</li> <li>Each consumer can subscribe multiple channels</li> </ul> </li> <li>Subscribers<ul> <li>When a consumer is subscribed to a channel, it acts as subscriber</li> </ul> </li> <li>Pub/Sub (Publish/Subscribe)<ul> <li>Message queue paradigm where publishers send data to subscribers</li> </ul> </li> <li>Broadcastings<ul> <li>A pub/sub link where transmissions are sent directly to the channel subscribers</li> </ul> </li> </ul>"},{"location":"rails/components/action_cable#connections","title":"Connections","text":"<ul> <li>Callbacks: (before, after, around)_command</li> </ul> <pre><code># app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection &lt; ActionCable::Connection::Base\n    identified_by :current_user\n\n    def connect\n      self.current_user = find_verified_user\n    end\n\n    private\n\n      def find_verified_user\n        if verified_user = User.find_by(id: cookies.encrypted[:user_id])\n          verified_user\n        else\n          reject_unauthorized_connection\n        end\n      end\n  end\nend\n</code></pre>"},{"location":"rails/components/action_cable#channels","title":"Channels","text":"<ul> <li>Callbacks: (before, after)_subscribe, (before, after)_unsubscribe</li> </ul> <pre><code># app/channels/application_cable/channel.rb\nmodule ApplicationCable\n  class Channel &lt; ActionCable::Channel::Base\n  end\nend\n\n# app/channels/chat_channel.rb\nclass ChatChannel &lt; ApplicationCable::Channel\n  # Called when the consumer has successfully\n  # become a subscriber to this channel\n  def subscribed\n    # Streams provide the mechanism by which channels route published content\n    # (broadcasts) to their subscribers\n    stream_from \"chat_#{params[:room]}\"\n  end\nend\n</code></pre>"},{"location":"rails/components/action_cable#broadcasting","title":"Broadcasting","text":"<pre><code># Somewhere in your app this is called, perhaps from a NewCommentJob\nActionCable.server.broadcast(\n  \"chat_#{room}\",\n  {\n    sent_by: 'Paul',\n    body: 'This is a cool chat app'\n  }\n)\n</code></pre>"},{"location":"rails/components/action_cable#consumer","title":"Consumer","text":"<pre><code>// app/javascript/channels/consumer.js\n// Action Cable provides the framework to deal with WebSockets in Rails\n// You can generate new channels where WebSocket features live\n// Using the `bin/rails generate channel` command\nimport { createConsumer } from \"@rails/actioncable\";\n\nexport default createConsumer();\n\n// Specify a different URL to connect to\ncreateConsumer(\"wss://example.com/cable\");\n// Or when using websockets over HTTP\ncreateConsumer(\"https://ws.example.com/cable\");\n// Use a function to dynamically generate the URL\ncreateConsumer(getWebSocketURL);\n\nfunction getWebSocketURL() {\n    const token = localStorage.get(\"auth-token\");\n    return `wss://example.com/cable?token=${token}`;\n}\n</code></pre>"},{"location":"rails/components/action_cable#subscriber","title":"Subscriber","text":"<pre><code>// app/javascript/channels/chat_channel.js\nimport consumer from \"./consumer\";\n// A consumer can act as a subscriber to a given channel any number of time\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"1st Room\" });\nconsumer.subscriptions.create({ channel: \"ChatChannel\", room: \"2nd Room\" });\nconsumer.subscriptions.create(\n    { channel: \"ChatChannel\", room: \"Best Room\" },\n    {\n        received(data) {\n            this.appendLine(data);\n        },\n\n        appendLine(data) {\n            const html = this.createLine(data);\n            const element = document.querySelector(\n                \"[data-chat-room='Best Room']\"\n            );\n            element.insertAdjacentHTML(\"beforeend\", html);\n        },\n\n        createLine(data) {\n            return (\n                &lt;article class=\"chat-line\"&gt;\n                    &lt;span class=\"speaker\"&gt;${data[\"sent_by\"]}&lt;/span&gt;\n                    &lt;span class=\"body\"&gt;${data[\"body\"]}&lt;/span&gt;\n                &lt;/article&gt;\n            );\n        },\n    }\n);\n</code></pre>"},{"location":"rails/security/session","title":"Sessions","text":"<ul> <li>Sessions enable the application to maintain user specific state<ul> <li>While users interact with the application</li> <li>Allow users to authenticate once and remain signed in for future requests</li> <li>Track contents of a shopping basket</li> </ul> </li> <li>Authentication<ul> <li>User provides username &amp; password and webapp authenticates them</li> <li>After auth, app stores user id in session hash and the session is now valid</li> <li>On every request, application will identify the user by its id in the session</li> <li>The session id in the cookie identifies the session</li> </ul> </li> </ul>"},{"location":"rails/security/session#session-hijacking","title":"Session Hijacking","text":"<ul> <li>Anyone who seizes a cookie from someone else may use the app as this user</li> <li>Sniffing the cookie in an insecure network<ul> <li>In an unencrypted wireless LAN, it is easy to listen the traffic of connected clients</li> <li>Webapp should provide secure connection over SSL</li> <li>In rails, this can be accomplished by forcing SSL connection in application config<ul> <li>config.force_ssl = true</li> </ul> </li> </ul> </li> <li>Not clearing out the cookies after working at a public terminal<ul> <li>Provide a logout button in the webapp and make it prominent</li> </ul> </li> </ul>"},{"location":"rails/security/session#session-storage","title":"Session Storage","text":"<ul> <li>CookieStore saves the session hash in a cookie on the client-side<ul> <li>Server retrieves it from the cookies and eliminates the need for session ID</li> <li>But cookies have a size limit of 4 kB</li> <li>This increases the speed of app but there can be security concerns</li> </ul> </li> <li>Avoid storing sensitive data in cookies<ul> <li>The client may preserve cookie contents even for expired cookies</li> <li>The client may copy cookies to other machines</li> </ul> </li> <li>Client may delete the cookie before expiration<ul> <li>Persist all data on the server side</li> <li>Session cookies do not invalidate themselves and can be maliciously reused<ul> <li>App should invalidate old session cookies using a stored timestamp</li> </ul> </li> </ul> </li> <li>Rails encrypts cookies by default<ul> <li>Client cannot read or edit the contents without breaking encryption</li> <li>Take appropriate care of your secrets to keep cookies secured</li> <li>Use different salt values for encrypted and signed cookies</li> </ul> </li> </ul>"},{"location":"rails/security/session#replay-attack","title":"Replay Attack","text":"<ul> <li>A user receives credits, the amount is stored in session<ul> <li>Which is a bad idea anyway, but we'll use this for example</li> <li>The user buys something and the new adjusted credit value is updated in session</li> <li>The user copies the cookie during the first step and replaces the current cookie</li> <li>The user has their original credit back</li> </ul> </li> <li>Including a nonce (a random value) in the session solves replay attacks<ul> <li>It is valid only once and server keeps track of all valid nonces</li> <li>If there are several application servers<ul> <li>Storing nonces in database would defeat the purpose of CookieStore</li> <li>That is to avoid access to database</li> </ul> </li> </ul> </li> <li>The best solution is not to store this kind of data in session<ul> <li>But in the database</li> </ul> </li> </ul>"},{"location":"rails/security/session#session-fixation","title":"Session Fixation","text":"<ul> <li>Fixing a user's session ID and forcing the user's browser into using this ID</li> <li>The attacker creates a valid session ID<ul> <li>Load the login page and take the session ID in the cookie from the response</li> <li>They keep session alive by accessing the app periodically</li> </ul> </li> <li>They force the user's browser into using this session ID<ul> <li>They may not change a cookie of another domain (because of same origin policy)</li> <li>They have to run a javascript from the domain of the target webapp</li> <li>Injecting the javascript code into the app by XSS accomplishes this attack</li> <li><code>&lt;script&gt;document.cookie=\"_session_id=16d5b78abb28e3d6206b60f22a03c8d9\";&lt;/script&gt;</code></li> </ul> </li> <li>Attacker lures victim to the infected page with the javascript code<ul> <li>By viewing the page, the victim's browser will change<ul> <li>the session ID to the trap session ID</li> </ul> </li> <li>As the new trap session is unused, the webapp will require user to authenticate</li> <li>From now on, the victim &amp; the attacker will co-use the same session</li> <li>The session became valid and the victim didn't notice the attack</li> </ul> </li> <li>The most effective countermeasure is to issue a new session identifier<ul> <li>And declare the old one invalid after a successful login (reset_session)</li> <li>This is a good countermeasure against session hijacking as well</li> <li>Devise gem automatically expires sessions on sign in &amp; sign out</li> </ul> </li> <li>Another countermeasure is to save user specific properties in the session<ul> <li>Verify them every time a request comes in</li> <li>Such properties can be remote IP address &amp; user agent (browser name)</li> <li>But many ISPs and organizations put their users behind proxies</li> <li>And these properties might change over the course of a session</li> </ul> </li> </ul>"},{"location":"rails/security/session#session-expiry","title":"Session Expiry","text":"<ul> <li>We can set expiration for the cookie with the session ID<ul> <li>But the client can edit cookies that are stored in the web browser</li> <li>So expiring sessions on the server is safer</li> </ul> </li> <li>Need to check both updated_at &amp; created_at<ul> <li>The attacker may be keeping session alive through session fixation</li> </ul> </li> </ul> <pre><code>class Session &lt; ApplicationRecord\n  def self.sweep(time = 1.hour)\n    where(updated_at: ...time.ago).or(where(created_at: ...2.days.ago)).delete_all\n  end\nend\n</code></pre>"},{"location":"rails/security/csrf","title":"Cross-Site Request Forgery (CSRF)","text":"<ul> <li>Malicious code or link is included that accesses a web application<ul> <li>The user is believed to have authenticated that webapp</li> <li>If the session has not timed out, attacker may execute unauthorized commands</li> </ul> </li> <li>Webapps use cookie-based sessions<ul> <li>Either they store the session ID in the cookie &amp; have a server-side session hash<ul> <li>Or the entire session hash is on the client side</li> </ul> </li> <li>In either case the browser automatically sends the cookie on very request</li> <li>If the request comes from a site of a different domain, it will also send the cookie<ul> <li>For example, embedded in facebook post</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/csrf#example","title":"Example","text":"<ul> <li>Bob browses a message board and views a post from a hacker</li> <li>It contains a crafted HTML image element<ul> <li>That references a command in Bob's project management app</li> <li>Rather than an image file: </li> </ul> </li> <li>Bob's session at www.webapp.com is still alive because he didn't log out</li> <li>By viewing the post, the browser finds an image tag<ul> <li>And tries to load the suspected image from www.webapp.com</li> <li>It will also send along the cookie with the session ID</li> </ul> </li> <li>The webapp verifies the user info in the corresponding session hash<ul> <li>And destroys the project with the ID 1</li> <li>And returns a result page which is unexpected result for the browser</li> <li>So it will not display the image</li> </ul> </li> <li>Bob does't notice the attack but a few days later he finds out<ul> <li>That the project number one is gone</li> </ul> </li> </ul>"},{"location":"rails/security/csrf#use-get-and-post-appropriately","title":"Use Get and Post appropriately","text":"<ul> <li>Use get if the interaction is more like a question<ul> <li>That is, if it is a safe operation like query, read operation, lookup</li> </ul> </li> <li>Use post if the interaction is more like an order<ul> <li>Or changes the state or the resource (e.g. subscription to a service)</li> <li>Or the user is held accountable for the results of the interaction</li> </ul> </li> <li>Post requests can be sent automatically also using onclick or mouseover events<ul> <li>Or using javascript code inside a response</li> <li>We must disallow cross-site"},{"location":"rails/security/redirection_and_files","title":"Redirection and Files","text":""},{"location":"rails/security/redirection_and_files#redirection","title":"Redirection","text":"<ul> <li>Whenever the user is allowed to pass (parts of) the url for redirection<ul> <li>It is possibly vulnerable</li> </ul> </li> <li>The most obvious attack would be to redirect users to a fake app<ul> <li>That looks and feels exactly as the original one</li> <li>This so-called phishing attack works by sending an unsuspicious link in email<ul> <li>And injecting the link by XSS in the webapp</li> <li>Or putting the link into an external site</li> </ul> </li> <li>It is unsuspicious because the link starts with the url to the webapp<ul> <li>The url to the malicious site is hidden in the redirection parameter</li> <li>'http://www.example.com/site/redirect?to=www.attacker.com'</li> </ul> </li> <li>Include only the expected parameters in a legacy action and permit parameters<ul> <li>If you redirect to a url, check it with a permitted list or a regex</li> </ul> </li> </ul> </li> <li>Another redirection and self-contained XSS attack works by using data protocol<ul> <li>This protocol displays its contents directly in the browser</li> <li>And can be anything from html or javascript to entire images</li> <li>For example, base64 encoded javascript which displays a simple message box<ul> <li>data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K</li> </ul> </li> <li>In a redirection url, an attacker could redirect to this url with malicious code in it</li> <li>Do not allow user to supply (parts of) the url to be redirected to</li> </ul> </li> </ul>"},{"location":"rails/security/redirection_and_files#file-uploads","title":"File Uploads","text":"<ul> <li>File names which the user may choose (partly) should always be filtered<ul> <li>As an attacker could use a malicious file name to overwrite any file on the server</li> </ul> </li> <li>If you store file uploads at /var/www/uploads<ul> <li>And the user enters a file name like '../../../etc/passwd'</li> <li>It may overwrite an important file</li> <li>Of course, ruby interpreter would need the appropriate permissions to do so</li> <li>One more reason to run web servers, db servers, etc. as less privileged unix user</li> </ul> </li> <li>When filtering user input file names<ul> <li>Don't try to remove malicious parts<ul> <li>Think where the webapp removes all '../' in a file name</li> <li>And attacker uses a string like '....//' and the result will be '../'</li> </ul> </li> <li>It is best to use a permitted list approach<ul> <li>Which checks for validity of a file name with a set of accepted characters</li> <li>This is opposed to restricted list approach that removes disallowed chars</li> </ul> </li> </ul> </li> <li>A significant disadvantage of synchronous processing of file uploads<ul> <li>Is its vulnerability to denial of service attacks</li> <li>An attacker can synchronously start image file uploads from many computers<ul> <li>Which increases server load and may eventually crash or stall the server</li> </ul> </li> <li>Process media files asynchronously<ul> <li>Save the media file and schedule a processing request in the database</li> <li>A second process will handle the processing of the file in background</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/redirection_and_files#executable-code-in-files","title":"Executable Code in Files","text":"<ul> <li>The popular Apache web server has an option called DocumentRoot<ul> <li>This is the home directory of the website</li> <li>Everything in this directory tree will be served by the web server</li> </ul> </li> <li>If there are files with a certain file name extention<ul> <li>The code in it will be executed when requested (might require some options to be set)</li> <li>Examples are .php &amp; .cgi files</li> </ul> </li> <li>If your Apache DocumentRoot points to rails' /public directory<ul> <li>Don't put file uploads in it, store at least one level upwards</li> </ul> </li> </ul>"},{"location":"rails/security/redirection_and_files#file-downloads","title":"File Downloads","text":"<ul> <li>send_file method sends files from the server to the client<ul> <li>If you use a file name (that the user entered) without filtering</li> <li>Any file can be downloaded</li> <li>Example: send_file('/var/www/uploads/' + params[:filename])</li> </ul> </li> <li>Simply pass a file name like '../../../etc/passwd' to download the server's login info<ul> <li>A simple solution is to check that the requested file is in the expected directory</li> </ul> </li> <li>Another approach is to store file names in database<ul> <li>And name the files on the disk after the ids in the database</li> <li>This also avoids possible code in an uploaded file</li> <li>attachment_fu plugin does this in a similar way</li> </ul> </li> </ul> <pre><code>basename = File.expand_path('../../files', __dir__)\nfilename = File.expand_path(File.join(basename, @file.public_filename))\nraise if basename != File.expand_path(File.dirname(filename))\nsend_file(filename, disposition: 'inline')\n</code></pre>"},{"location":"rails/security/user_management","title":"User Management","text":"<ul> <li>It is advisable to use common plugins for authorization and authentication<ul> <li>Rather than rolling your own (e.g. device, authlogic)</li> </ul> </li> <li>Good ones store only cryptographically hashed passwords, not in plain-text</li> <li>Rails has built-in method has_secure_password<ul> <li>Supports secure password hashing, confirmation, &amp; recovery mechanisms</li> </ul> </li> </ul>"},{"location":"rails/security/user_management#brute-forcing-accounts","title":"Brute Forcing Accounts","text":"<ul> <li>A list of usernames of webapp may be misused to brute force corresponding passwords<ul> <li>Because most people don't use sophisticated passwords</li> <li>Most passwords are a combination of dictionary words and possibly numbers</li> </ul> </li> <li>Because of this, most web applications will display a generic error message<ul> <li>Like username or password is incorrect</li> <li>But in forgot password pages, most admit that username not found</li> <li>This allows an attacker to compile a list of usernames and brute-force the accounts</li> </ul> </li> <li>Require to enter a CAPTCHA after a number of failed logins from a certain IP address<ul> <li>However, it's not bullet proof since these automated programs may change their IP</li> <li>But it raises an barrier to attack</li> </ul> </li> </ul>"},{"location":"rails/security/user_management#account-hijacking","title":"Account Hijacking","text":"<ul> <li>Passwords<ul> <li>If an attacker steals a user's session cookie and co-uses the application<ul> <li>It is easy to change the password and hijack the account</li> <li>Require the user to enter the old password when changing</li> </ul> </li> <li>If the change password form is vulnerable to CSRF<ul> <li>An attacker might change password by luring users to a web page</li> <li>And presenting a crafted img-tag which does CSRF</li> <li>So make this form safe against CSRF</li> </ul> </li> </ul> </li> <li>Email<ul> <li>Attacker may also take over the account by changing email address</li> <li>After that, they will change the password using the forgot password page</li> <li>Require the user to enter password when changing the email address too</li> </ul> </li> <li>CSRF &amp; XSS vulnerability in mail client<ul> <li>Victim is lured to a website controlled by the attacker</li> <li>Where a crafter img-tag is present and results in a http get request<ul> <li>That changes the filter settings of the mail client</li> <li>To forward all emails to their email address</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/user_management#captcha","title":"CAPTCHA","text":"<ul> <li>CAPTCHA is a challenge-response test<ul> <li>To determine that the response is not generated by a computer</li> <li>Used to protect registration forms from attackers</li> <li>And comment forms from automatic spam bots</li> </ul> </li> <li>Positive captcha<ul> <li>Asking users to type the letters of a distorted image</li> <li>A popular positive captcha api is recaptcha<ul> <li>You will get two keys from the api (public &amp; private) to put in rails env</li> <li>After that, you can use recaptcha_tags in view and verify_repatcha in controller</li> </ul> </li> </ul> </li> <li>Negative captcha<ul> <li>Most bots are really naive</li> <li>They crawl the web and put their spam into every form's field they can find</li> <li>Negative captchas take advantage of that and include a honeypot field</li> <li>This field is hidden from human users by css or javascript</li> <li>Though they won't suffice to protect against targeted tailor-made bots</li> </ul> </li> </ul>"},{"location":"rails/security/user_management#logging","title":"Logging","text":"<ul> <li>By default, rails logs all requests being made to the webapp<ul> <li>What will happen if an attacker got full access to the web server</li> <li>Encrypting secrets &amp; passwords in the database will be quite useless</li> </ul> </li> <li>Filter certain request parameters from the log files<ul> <li>Like login credentials, credit card numbers, etc.</li> <li><code>config.filter_parameters &lt;&lt; :password</code></li> <li>Default filters initialized in 'initializers/filter_parameter_logging.rb'<ul> <li>:passw, :secret, token to handle password, password confirmation, my_token</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/user_management#regular-expressions","title":"Regular Expressions","text":"<ul> <li>Ruby uses a slightly different approach to match beginning &amp; end of a string</li> <li>In ruby, '^' &amp; '$' match the line beginning &amp; end</li> <li>So regex like /^https?:\\/\\/[^\\n]+$/i matches the second line &amp; rest doesn't matter<ul> <li>javascript:exploit_code():/*</li> <li>http://hi.com</li> <li>*/</li> </ul> </li> <li>'\\A' &amp; \\z' should be used instead of '^' &amp; '$'<ul> <li>/\\Ahttps?:\\/\\/[^\\n]+\\z/i</li> </ul> </li> </ul>"},{"location":"rails/security/user_management#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li>The most common parameter that a user might tamper with is the id parameter<ul> <li>Like http://www.domain.com/project/1 has id 1</li> </ul> </li> <li>It will be available in params in the controller<ul> <li><code>@project = Project.find(params[:id])</code></li> </ul> </li> <li>If the user changes the id to 42 and if it is not to be allowed<ul> <li>They will have access to it anyway</li> </ul> </li> <li>So query the user's access rights<ul> <li><code>@project = @current_user.projects.find(params[:id])</code></li> </ul> </li> </ul>"},{"location":"rails/security/injection","title":"Injection","text":"<ul> <li>Attacks that introduce malicious code or parameters into webapp<ul> <li>In order to run it within its security context</li> </ul> </li> <li>It is tricky because the same code or parameter can be malicious in one context<ul> <li>But totally harmless in another</li> </ul> </li> <li>A context can be scripting, query, programming language shell, ruby/rails method</li> </ul>"},{"location":"rails/security/injection#permitted-vs-restricted-lists","title":"Permitted vs Restricted Lists","text":"<ul> <li>Restricted list contains bad email addresses, non-public action, bad html tags</li> <li>Permitted list contains good email addresses, public actions, good html tags</li> <li>When sanitizing, protecting, verifying something, prefer permitted lists</li> <li>Though sometimes it's not possible to create a permitted list (e.g. spam filter)</li> <li>Use <code>before_action except: []</code> instead of <code>only: []</code> for security related actions<ul> <li>This way you don't forget to enable security checks for new actions</li> </ul> </li> <li>Allow <code>&lt;strong&gt;</code> instead of removing <code>&lt;script&gt;</code> against cross site scripting (XSS)</li> <li>Don't try to correct user input using restricted lists<ul> <li>This will make the attack work: <code>\"&lt;sc&lt;script&gt;ript&gt;\".gsub(\"&lt;script&gt;\", \"\")</code></li> <li>But reject malformed input</li> </ul> </li> </ul>"},{"location":"rails/security/injection#cross-site-scripting-xss","title":"Cross Site Scripting (XSS)","text":"<ul> <li>An attacker injects client-side executable code<ul> <li>Web app saves it and displays it on the page, later presented to a victim</li> </ul> </li> <li>Most XSS examples simply display an alert box, but it is more powerful than that<ul> <li>It can run javascript that performs harmful operations</li> </ul> </li> <li>XSS can steal the cookie, hijack the session, redirect victim to fake website<ul> <li>Display advertisements for the benefit of the attacker</li> <li>Change elements on the website to get confidential information</li> <li>Install malicious software through security holes in the web browser</li> </ul> </li> <li>It is common to exploit SQL injection vulnerability in a web app framework<ul> <li>Insert malicious code in every textual table column</li> </ul> </li> </ul>"},{"location":"rails/security/injection#entry-points","title":"Entry points","text":"<ul> <li>Vulnerable url and its parameters where an attacker can start an attack<ul> <li>Most common entry points are message posts, user comments, guest books</li> <li>Project titles, document names, search result pages have also been vulnerable</li> <li>Just about everywhere where the user can input data</li> <li>The input doesn't necessarily have to come from input boxes on webpages</li> <li>It can be any url parameter, obvious, hidden or internal</li> </ul> </li> <li>User may intercept any traffic<ul> <li>Applications or client-site proxies make it easy to change requests</li> <li>There are also other attack vectors like banner advertisements</li> </ul> </li> <li>Mpack attack framework<ul> <li>Tries to install malicious software through security holes in the web browser</li> <li>Very successfully, 50% of the attacks succeed</li> </ul> </li> </ul>"},{"location":"rails/security/injection#sql-injection","title":"SQL Injection","text":"<ul> <li>Aim at influencing database queries by manipulating webapp parameters<ul> <li>A popular goal is to bypass authorization</li> <li>Another goal is to carry out data manipulation or reading arbitrary data</li> </ul> </li> <li>For example, do not use user input in a query directly<ul> <li><code>Project.where(\"name = '#{params[:name]}'\")</code></li> <li>If a user enters <code>'OR 1) --</code>, the resulting query will be</li> <li><code>SELECT * FROM projects WHERE (name = '' OR 1) --)</code></li> <li>The two dashes start a comment ignoring everything after it</li> <li>So the query returns all records fronn the project table</li> </ul> </li> </ul>"},{"location":"rails/security/injection#bypassing-authorization","title":"Bypassing Authorization","text":"<ul> <li>Usually web application includes access control</li> <li>User enters login credentials and webapp tries to find matching record in users table</li> <li>The app grants access when it finds a record</li> <li>An attacker may possibly bypass this check using SQL injection like this<ul> <li>If an attacker enters <code>' OR '1'='1</code> as the name, and <code>' OR '2'&gt;'1</code> as the password</li> <li><code>User.find_by(\"login = '#{params[:name]}' AND password = '#{params[:password]}'\")</code></li> <li>The resulting query will be</li> <li><code>SELECT * FROM users WHERE login = '' OR '1'='1' AND password = '' OR '2'&gt;'1' LIMIT 1</code></li> <li>This will find the first record in the database and grant access</li> </ul> </li> </ul>"},{"location":"rails/security/injection#unauthorized-reading","title":"Unauthorized Reading","text":"<ul> <li>THe union statement connects two SQL queries and returns the data in one set</li> <li>An attacker can use it to read arbitrary data from the database</li> <li>For example<ul> <li><code>Project.where(\"name = '#{params[:name]}'\")</code></li> <li>Inject another query using union</li> <li><code>') UNION SELECT id, login AS name, password AS description, 1, 1, 1 FROM users --</code></li> <li>The resulting query will be</li> <li><code>SELECT * FROM projects WHERE (name = '') UNION</code><ul> <li><code>SELECT id, login AS name, password AS description, 1, 1, 1 FROM users --'</code></li> </ul> </li> </ul> </li> <li>The result won't be a list of project (as there is no project with empty name)<ul> <li>But a list of usernames and their password</li> <li>So hopefully you securely hashed the password in the database</li> <li>The only problem for the attacker is that<ul> <li>The number of columns has to be the same in both queries (required for union)</li> <li>That's why the second query includes a list of ones</li> </ul> </li> <li>Also, it renames some columns so that the app displays the values in that field</li> </ul> </li> </ul>"},{"location":"rails/security/injection#countermeasures","title":"Countermeasures","text":"<ul> <li>Rails has a built-in filter for special SQL chars<ul> <li>To escape ', \", NULL, and line breaks</li> <li>Using <code>find</code> or <code>find_by_something</code> automatically applies this countermeasure</li> </ul> </li> <li>But in SQL fragments like <code>where</code>, <code>connection.execute</code>, <code>find_by_sql</code><ul> <li>It has to be applied manually</li> </ul> </li> <li>Instead of passing a string, use positional handlers to sanitize tainted string<ul> <li><code>Model.where(\"zip_code = ? AND quantity &gt;= ?\", entered_zip_code, entered_quantity)</code></li> <li>The question marks will be replaced by the value of parameters</li> </ul> </li> <li>Named handlers can also be used<ul> <li><code>values = { zip: entered_zip_code, qty: entered_quantity }</code></li> <li><code>Model.where(\"zip_code = :zip AND quantity &gt;= :qty\", values)</code></li> </ul> </li> <li>Can split and chain conditionals<ul> <li><code>Model.where(zip_code: entered_zip_code).where(\"quantity &gt;= ?\", entered_quantity)</code></li> </ul> </li> <li>In other raw SQL strings, can use <code>sanitize_sql</code></li> </ul>"},{"location":"rails/security/injection#html-javascript-injection","title":"HTML Javascript Injection","text":"<ul> <li>Most common XSS language is of course the most popular client-side scripting language<ul> <li>Javascript, often in combination with HTML</li> <li></li> <li></li> <li> <li>Escaping user input is essential</li>"},{"location":"rails/security/injection#cookie-theft","title":"Cookie Theft","text":"<ul> <li>Javascript enforces same origin policy<ul> <li>Script from one domain cannot access cookies of another domain</li> </ul> </li> <li>'document.cookie' holds the cookie of the originating web server<ul> <li>You can read &amp; write this property if you embed the code directly in HTML document</li> <li></li> <li>But that is not useful to the attacker as they will see their own cookie</li> </ul> </li> <li>This will try to load an image from the specific url plus the cookie<ul> <li>document.write('')</li> <li>This url doesn't exist, so the browser displays nothing<ul> <li>But the attacker can review their web server's access log files</li> <li>To see the victim's cookie</li> </ul> </li> <li>The log files on 'www.attacker.com' will read like this<ul> <li>GET http://www.attacker.com/_app_session=836c1c25278e5b321d6bea4f19cb57e2</li> </ul> </li> </ul> </li> <li>These attackes can be mitigated by adding the 'httpOnly' flag to cookies<ul> <li>So that 'document.cookie' may not be read by javascript</li> <li>Though the cookies will still be visible using Ajax</li> </ul> </li> </ul>"},{"location":"rails/security/injection#defacement","title":"Defacement","text":"<ul> <li>With web page defacement, an attacker can do a lot of things. For example,<ul> <li>Present false information or lure the victim on the attacker's website</li> <li>To steal cookie, login credentials, or other sensitive data</li> </ul> </li> <li>Most popular way is to include code from external sources by iframes<ul> <li></li> <li>This loads arbitrary html and/or javascript from external source</li> <li>And embeds it as part of the site</li> </ul> </li> <li>A more specialized attack could overlap the entire website<ul> <li>Or display a login form which looks the same as the site's original<ul> <li>But transmits the username &amp; password to the attacker's site</li> </ul> </li> <li>Or it could use CSS and/or javascript to hide a legitimate link<ul> <li>And display another one at its place which redirects to a fake website</li> </ul> </li> </ul> </li> <li>Reflected injection attacks are those where the payload is not stored<ul> <li>It's not presented to the victim, but it's included in the url</li> <li>Especially search forms fail to escape the search string</li> <li><code>http://www.news.com/?zipcode=1--&gt;&lt;script src=http://www.attacker.com&gt;&lt;/script&gt;&lt;!--</code></li> </ul> </li> </ul>"},{"location":"rails/security/injection#obfuscation-and-encoding-injection","title":"Obfuscation and Encoding Injection","text":"<ul> <li>Network traffic is mostly based on the limited western alphabet</li> <li>So new char encodings like unicode emerged to transmit chars in other languages<ul> <li>But this is also a threat to web apps</li> <li>As malicious code can be hidden in different encodings</li> <li>That web browser might be able to process but web app might not</li> <li></li> </ul> </li> <li><code>sanitize()</code> method does a good job to fend off encoding attacks</li> </ul>"},{"location":"rails/security/injection#countermeasures_1","title":"Countermeasures","text":"<ul> <li>It is important to filter malicious input and to escape the output of the web app</li> <li>Especially for XSS, it is important to do permitted input filtering (over restricted)<ul> <li><code>sanitize(user_input, tags: allowed_tags, attributes: allowed_attributes)</code></li> </ul> </li> <li>Restricted list are never complete<ul> <li>Imagine a restricted list deletes 'script' from user input</li> <li>Now the attacker injects <code>&lt;scrscriptipt&gt;</code>, so after filter <code>&lt;script&gt;</code> remains</li> </ul> </li> <li>Use <code>html_escape()</code> to replace html input chars &amp;, \", &lt;, &gt;<ul> <li>By their uninterpreted representations in html &amp;, \", &lt;, &gt;</li> </ul> </li> </ul>"},{"location":"rails/security/injection#css-injection","title":"CSS Injection","text":"<ul> <li>It is actually javascript injection because some browsers allow javascript in CSS</li> <li>As custom CSS in web apps is quite rare feature<ul> <li>It may be hard to find a good permitted CSS filter</li> </ul> </li> <li>If you want to allow custom colors or images<ul> <li>You can allow the user to choose them</li> <li>And build the CSS in the web app</li> </ul> </li> <li>Use sanitize() method as a model for a permitted CSS filter</li> </ul>"},{"location":"rails/security/injection#example-myspace-samy-worm","title":"Example: MySpace Samy worm","text":"<ul> <li>It automatically sent a friend request to Samy (the attacker)<ul> <li>Simply by visiting his profile</li> <li>Within several hours he had over 1 million friend requests</li> <li>Which created so much traffic that MySpace went offline</li> </ul> </li> <li>MySpace blocked many tags, but allowed CSS, so the attacker put javascript into CSS<ul> <li> <li>But there are no quotes allowed in the payload</li> <li>Because single &amp; double quotes have already been used</li> <li>But javascript has a handly eval() function to execute any string as code     <pre><code>&lt;div\n    id=\"mycode\"\n    expr=\"alert('hah!')\"\n    style=\"background:url('javascript:eval(document.all.mycode.expr)')\"\n&gt;&lt;/div&gt;\n</code></pre></li> <li>The eval() function is a nightmare for restricted list input filters<ul> <li>As it allows the style attribute to hide the word 'innerHTML'</li> <li><code>alert(eval('document.body.inne' + 'rHTML'));</code></li> </ul> </li> <li>The next problem was MySpace filtering the word 'javascript'<ul> <li>So the author used <code>java&lt;NEWLINE&gt;script</code> to get around this <pre><code>&lt;div\n    id=\"mycode\"\n    expr=\"alert('hah!')\"\n    style=\"background:url('java\u21b5script:eval(document.all.mycode.expr)')\"\n&gt;&lt;/div&gt;\n</code></pre></li> </ul> </li> <li>Another problem for the author was the CSRF security tokens<ul> <li>Without them, he couldn't send a friend request over POST</li> <li>He got around it by sending a GET to the page right before adding a user</li> <li>And parsing the result for the CSRF token</li> </ul> </li> <li>In the end, he got a 4KB worm which he injected into his profile page</li>"},{"location":"rails/security/injection#textile-injection","title":"Textile Injection","text":"<ul> <li>If you want to provide text formatting other than html (due to security)</li> <li>Use a markup language which is converted to html on the server side<ul> <li>One such language for ruby is redcloth</li> <li>But without precautions it is also vulnerable to XSS</li> <li>Use redcloth in combination with permitted input filter</li> </ul> </li> </ul>"},{"location":"rails/security/injection#command-line-injection","title":"Command Line Injection","text":"<ul> <li>There are several methods in ruby to execute commands in underlying OS<ul> <li>system(cmd), exec(cmd), spawn(cmd), <code>cmd</code></li> </ul> </li> <li>If a user may enter the whole command or a part of it<ul> <li>You will have to be especially careful with these functions</li> <li>Because you can execute another command at the end of the first one</li> <li>Example 1: By concatenating them with a semicolon (;) or a vertical bar (|)<ul> <li><code>system(\"/bin/echo #{user_input}\")</code></li> <li><code>user_input = \"hello; rm *\"</code></li> </ul> </li> <li>Example 2: Kernel's open executes OS command with arg starts with (|)<ul> <li><code>open('| ls') { |file| file.read }</code></li> </ul> </li> </ul> </li> <li>Countermeasures are to use <code>File.open</code>, <code>IO.open</code> or <code>URI#open</code><ul> <li>They don't execute an OS command (doesn't accept <code>| ls</code> as a command)</li> <li><code>File.open('| ls') { |file| file.read }</code></li> <li><code>IO.open(0) { |file| file.read }</code></li> <li><code>URI('https://example.com').open { |file| file.read }</code></li> </ul> </li> </ul>"},{"location":"rails/security/injection#header-injection","title":"Header Injection","text":"<ul> <li>HTTP headers are dynamically generated<ul> <li>Under certain circumstances user input may be injected</li> <li>This can lead to false redirection, XSS or HTTP response splitting</li> </ul> </li> <li>Request headers have a referrer, user-agent (browser), cookie field, etc.<ul> <li>All of them are user supplied and may be manipulated with more or less effort</li> <li>Remember to escape these header fields</li> <li>E.g. when displaying the user agent in an admin area</li> </ul> </li> <li>Response headers hava a status code, cookie, location (redirection target url), etc.<ul> <li>Pay attention while building response headers partly based on user input</li> <li>E.g. you want to redirect the user back to a specific page</li> </ul> </li> </ul>"},{"location":"rails/security/injection#referer-header","title":"Referer Header","text":"<ul> <li>You want to redirect the user back to a specific page<ul> <li>So you introduce a referer field in a form: <code>redirect_to params[:referer]</code></li> <li>Rails puts the string into the location header and sends 302 status (redirect)</li> </ul> </li> <li>The first thing a malicious user would do is<ul> <li><code>http://www.webapp.com/controller/action?referer=http://www.malicious.tld</code></li> </ul> </li> <li>Due to a bug in old rails, a hacker may inject arbitrary header fields<ul> <li><code>?referer=http://www.malicious.tld%0d%0aX-Header:+Hi!</code></li> <li><code>?referer=path/at/your/app%0d%0aLocation:+http://www.malicious.tld</code></li> </ul> </li> <li>Note that %0d%0a is URL-encoded for \\r\\n<ul> <li>Which is a carriage-return and line-feed (CRLF) in ruby</li> <li>So the resulting HTTP header will overwrite the original location header</li> <li>HTTP/1.1 302 Moved Temporarily, Location: http://www.malicious.tld</li> </ul> </li> </ul>"},{"location":"rails/security/injection#dns-rebinding-and-host-header-attacks","title":"DNS Rebinding and Host Header Attacks","text":"<ul> <li>DNS rebinding is a method of manipulating resolution of domain names</li> <li>DNS rebinding circumvents the same-origin policy by abusing DNS instead<ul> <li>It rebinds a domain to a different IP address</li> <li>And then compromises the system by executing random code against the web app<ul> <li>From the changed IP address</li> </ul> </li> </ul> </li> <li>To guard against DNS rebinding and other Host header attacks<ul> <li>It is recommended to use the ActionDispatch::HostAuthorization middleware</li> <li>It is enabled by default in the development environment</li> <li>You have to activate it in production and other environments</li> <li>You can also configure exceptions and set your own response app</li> </ul> </li> </ul> <pre><code>Rails.application.config.hosts &lt;&lt; \"product.com\"\n\nRails.application.config.host_authorization = {\n  # Exclude requests for the /healthcheck/ path from host checking\n  exclude: -&gt;(request) { request.path.include?(\"healthcheck\") },\n  # Add custom Rack application for the response\n  response_app: -&gt; env do\n    [400, { \"Content-Type\" =&gt; \"text/plain\" }, [\"Bad Request\"]]\n  end\n}\n</code></pre>"},{"location":"rails/security/security_headers_admin_security","title":"Security Headers and Admin Security","text":""},{"location":"rails/security/security_headers_admin_security#http-security-headers","title":"HTTP Security Headers","text":""},{"location":"rails/security/security_headers_admin_security#default-security-headers","title":"Default Security Headers","text":"<ul> <li>By default rails is configured to return the following response headers</li> <li>Can be overrided in config/application: config.action_dispatch.default_headers</li> <li>X-Frame-Options<ul> <li>Indicates if a browser can render the page in a frame, iframe, embed, object tag</li> <li>Set to SAMEORIGIN by default to allow framing on the same domain only</li> <li>Set it to DENY to deny framing at all</li> <li>Remove this header compeletely if you want to allow framing on all domains</li> </ul> </li> <li>X-XSS-Protection<ul> <li>A deprecated legacy header</li> <li>Set to 0 in Rails by default to disable problematic legacy XSS auditors</li> </ul> </li> <li>X-Content-Type-Options<ul> <li>Set to 'nosniff' in Rails by default</li> <li>Stops the browser from guessing the MIME type of a file</li> </ul> </li> <li>X-Permitted-Cross-Domain-Policies<ul> <li>Set to none in Rails by default</li> <li>Disallows Adobe Flash and PDF clients from embedding your page on other domains</li> </ul> </li> <li>Referrer-Policy<ul> <li>Set to strict-origin-when-cross-origin in Rails by default</li> <li>For cross-origin requests, this only sends the origin in the Referer header</li> <li>Prevents leaks of private data that may be accessible from other parts of the full URL<ul> <li>Such as the path and query string</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#strict-transport-security-header","title":"Strict-Transport-Security Header","text":"<ul> <li>Makes sure the browser automatically upgrades to HTTPS for current and future connections</li> <li>Added to the response when enabling the force_ssl option<ul> <li>config.force_ssl = true</li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#content-security-policy-header","title":"Content-Security-Policy Header","text":"<ul> <li>To help protect against XSS and injection attacks<ul> <li>It is recommended to define a Content-Security-Policy response header</li> <li>Defined in config/initializers/content_security_policy.rb</li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#adding-a-nonce","title":"Adding a Nonce","text":"<ul> <li>If you are considering 'unsafe-inline', consider using nonces instead</li> <li>Nonces provide a substantial improvement over 'unsafe-inline'</li> <li>When implementing a Content Security Policy on top of existing code</li> <li>Using <code>SecureRandom.base64(16)</code> is a good default value<ul> <li>Because it will generate a new random nonce for each request</li> </ul> </li> <li>However, this method is incompatible with conditional GET caching<ul> <li>Because new nonces will result in new ETag values for every request</li> <li>An alternative to per-request random nonces would be to use the session id</li> <li>Its security depends on the session id being sufficiently random<ul> <li>And not being exposed in insecure cookies <pre><code>Rails.application.config.content_security_policy_nonce_generator =\n  -&gt; request { request.session.id.to_s }\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Once nonce generation is configured in an initializer</p> <ul> <li>Automatic nonce values can be added to script tags by passing nonce: true</li> </ul> <pre><code>&lt;%= javascript_tag nonce: true do %&gt;\n  alert('Hello, World!');\n&lt;% end %&gt;\n\n&lt;%= javascript_include_tag \"script\", nonce: true %&gt;\n\n// Per-session nonce value for allowing inline &lt;script&gt; tags\n&lt;head&gt;\n  &lt;%= csp_meta_tag %&gt;\n&lt;/head&gt;\n</code></pre> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#feature-policy-header","title":"Feature-Policy Header","text":"<ul> <li>Renamed to Permissions-Policy</li> <li>Requires a different implementation and isn't yet supported by all browsers</li> </ul> <pre><code># config/initializers/permissions_policy.rb\nRails.application.config.permissions_policy do |policy|\n  policy.camera      :none\n  policy.gyroscope   :none\n  policy.microphone  :none\n  policy.usb         :none\n  policy.fullscreen  :self\n  policy.payment     :self, \"https://secure.example.com\"\nend\n</code></pre>"},{"location":"rails/security/security_headers_admin_security#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<ul> <li>Browsers restrict cross-origin HTTP requests initiated from scripts</li> <li>If you want to run Rails as an API, and run a frontend app on a separate domain<ul> <li>You need to enable Cross-Origin Resource Sharing (CORS)</li> </ul> </li> <li>You can use the Rack CORS middleware for handling CORS<ul> <li>If you've generated your application with the --api option</li> <li>Rack CORS has probably already been configured and you can skip these steps</li> <li>To get started, add the rack-cors gem to your Gemfile: <code>gem 'rack-cors'</code></li> </ul> </li> </ul> <pre><code># config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, \"Rack::Cors\" do\n  allow do\n    origins 'example.com'\n\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n</code></pre>"},{"location":"rails/security/security_headers_admin_security#intranet-and-admin-security","title":"Intranet and Admin Security","text":"<ul> <li>Intranet and administration interfaces are popular attack targets<ul> <li>Because they allow privileged access</li> <li>Highest threats are XSS and CSRF</li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#cross-site-scripting","title":"Cross-Site Scripting","text":"<ul> <li>If your app re-displays malicious user input from extranet, it's vulnerable to XSS</li> <li>Having one single place in the admin interface or intranet<ul> <li>Where the input has not been sanitized makes the entire app vulnerable</li> </ul> </li> <li>Possible exploits include<ul> <li>Stealing the privileged administrator's cookie</li> <li>Injecting an iframe to steal the administrator's password</li> <li>Installing malicious software through browser security holes<ul> <li>To take over the administrator's computer</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#cross-site-request-forgery","title":"Cross-Site Request Forgery","text":"<ul> <li>Cross-Site Request Forgery (CSRF), also known as Cross-Site Reference Forgery (XSRF)</li> <li>Allows the attacker to do everything the administrator or intranet user may do</li> <li>Example: Router reconfiguration by CSRF<ul> <li>Attackers sent a malicious e-mail, with CSRF in it<ul> <li>It claimed there was an e-card waiting for the user</li> <li>It contained an image tag that resulted in an HTTP-GET request</li> <li>To reconfigure the user's router</li> </ul> </li> <li>The request changed the DNS-settings<ul> <li>So that requests would be mapped to the attacker's site</li> <li>Everyone saw the attacker's fake website and had their credentials stolen</li> </ul> </li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#additional-precautions","title":"Additional Precautions","text":"<ul> <li>Common admin interface works like this<ul> <li>It's located at www.example.com/admin</li> <li>May be accessed only if the admin flag is set in the User model</li> <li>Re-displays user input and allows the admin to delete/add/edit desired data</li> </ul> </li> <li>It is very important to think about the worst case<ul> <li>What if someone really got hold of your cookies or user credentials</li> <li>Introduce roles for the admin interface to limit the possibilities of the attacker</li> <li>Or how about special login credentials for the admin interface</li> <li>Or a special password for very serious actions</li> </ul> </li> <li>Does the admin really have to access the interface from everywhere in the world<ul> <li>Limiting login to a bunch of source IP addresses</li> <li>Examine request.remote_ip to find out the user's IP address</li> <li>This is not bullet-proof but a great barrier, though there might be a proxy in use</li> </ul> </li> <li>Put the admin interface to a special subdomain such as admin.application.com<ul> <li>And make it a separate application with its own user management</li> <li>This makes impossible to steal an admin cookie from the usual domain</li> <li>This is because of the same origin policy in your browser</li> </ul> </li> </ul>"},{"location":"rails/security/security_headers_admin_security#unsafe-query-generation","title":"Unsafe Query Generation","text":"<ul> <li>Due to the way Active Record interprets parameters<ul> <li>In combination with the way that Rack parses query parameters</li> <li>It was possible to issue unexpected database queries with IS NULL where clauses</li> <li>deep_munge method was introduced as a solution to keep Rails secure by default</li> </ul> </li> </ul> <pre><code># When params[:token] is one of: [nil], [nil, nil, ...] or ['foo', nil]\n# it will bypass the test for nil, but IS NULL or IN ('foo', NULL) where clauses\n# still will be added to the SQL query\n# To keep Rails secure by default, deep_munge replaces some of the values with nil\n# null -&gt; nil, [null] -&gt; [], [null, null, ...] -&gt; [], ['foo', null] =&gt; ['foo']\nunless params[:token].nil?\n  user = User.find_by_token(params[:token])\n  user.reset_password!\nend\n</code></pre>"},{"location":"react/components","title":"Components","text":"<ul> <li>React is a Javascript library for rendering user interfaces (UI)<ul> <li>UI is built from small units like buttons, text, images</li> <li>React lets you combine them into reusable, nestable components</li> </ul> </li> <li>React applications are built from isolated pieces of UI called components<ul> <li>Traditionally, first content was marked up and then interaction was added using js</li> <li>React puts interactivity first while still using the same technology</li> </ul> </li> <li>React component is a javascript function that you can sprinkle with markup<ul> <li>These are UI elements that can be reused</li> <li>They use the same html tags under the hood</li> <li>Can be as small as button or as large as an entire page</li> </ul> </li> <li>Defining components<ul> <li>Their names must start with a capital letter</li> <li>Should return jsx which should be rendered on the screen<ul> <li>If nothing should be rendered, it should return null</li> </ul> </li> <li>Multiple components can be defined in the same file</li> <li>Components can be nested &amp; rendered but their definitions cannot be nested</li> </ul> </li> </ul> <pre><code>const Profile = () =&gt; &lt;img src=\"image_url\" /&gt;;\n\nconst Gallery = () =&gt; (\n    &lt;div&gt;\n        &lt;Profile /&gt;\n        &lt;Profile /&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/components#jsx","title":"JSX","text":"<ul> <li>Syntax extension that is written like html</li> <li>But actually it is javascript under the hood</li> <li>Lets you embed markup inside javascript</li> <li>Variables or logical statements are enclosed within <code>{}</code></li> </ul>"},{"location":"react/components#jsx-rules","title":"JSX Rules","text":"<ul> <li>Return a single root element<ul> <li>If there are multiple elements, wrap them with a single parent tag</li> <li>If you don't want to use an extra element like <code>div</code>, fragment can be used</li> <li>Fragment is an empty tag &amp; lets you group things <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></li> </ul> </li> <li>Close all the tags<ul> <li>Self-closing tags like <code>img</code> work in html: <code>&lt;img src=''&gt;</code></li> <li>But they should be closed in jsx: <code>&lt;img src=''/&gt;</code></li> <li>Wrapping tags like <code>li</code> should also have a closing tag: <code>&lt;li&gt;text&lt;/li&gt;</code></li> </ul> </li> <li>camelCase most of the things<ul> <li>Attributes cannot contain dashes like <code>margin-left</code>: <code>&lt;img style={{ marginLeft: 2 }}/&gt;</code></li> <li>Reserved words like <code>class</code> cannot be used: <code>&lt;img className={classes.image}/&gt;</code> --&gt;</li> </ul> </li> </ul> <pre><code>const TodoList = () =&gt; {\n    const person = { name: \"Name\", theme: {} };\n\n    return (\n        &lt;div style={person.theme}&gt;\n            &lt;h1&gt;{person.name}'s Todos&lt;/h1&gt;\n            &lt;img className=\"avatar\" src=\"image_url\" /&gt;\n            &lt;ul&gt;\n                &lt;li&gt;Task 1&lt;/li&gt;\n                &lt;li&gt;Task 2&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    );\n};\nexport default TodoList;\n</code></pre> <p>&lt;!--</p>"},{"location":"react/components#props","title":"Props","text":"<ul> <li>React components use props to communicate with each other</li> <li>Similar to html attributes, but you can pass any javascript value through props</li> <li>Including objects, arrays, functions, jsx</li> <li>Props can be destructured in the function arguments of the component</li> <li>Props are read-only and immutable</li> <li>If props need to be changed, the parent component can pass new values</li> <li>Hence props are not always static, they can be updated by parent</li> <li>Every parent component can pass some information</li> <li>To its child components by giving them props</li> <li>When you nest content inside a jsx tag</li> <li>The parent conmponent will receive that content in a prop called children</li> <li>In <code>&lt;Card&gt;&lt;Avatar/&gt;&lt;/card&gt;</code>, Card component will receive Avatar in 'children' prop</li> </ul> <pre><code>const Profile = () =&gt; (\n  &lt;Card&gt;\n    &lt;Avatar\n      size={100}\n      person={{ name: 'Katsuko Saruhashi', image_url: 'image_url' }}\n    /&gt;\n  &lt;/Card&gt;\n);\n\nconst Avatar = ({ person, size }) =&gt; (\n  &lt;img\n    className='avatar'\n    src={person.image_url}\n    alt={person.name}\n    width={size}\n    height={size}\n  /&gt;\n);\n\nconst Card = ({ children }) =&gt; (\n  &lt;div className=\"card\"&gt;\n    {children}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"react/components#rendering-lists","title":"Rendering Lists","text":"<ul> <li>Javascript's <code>map()</code> can be used to transform</li> <li>An array of data into an array of components</li> <li>For each mapped component, a unique 'key' should be specified as prop</li> <li>Keys tell react which item corresponds to which component<ul> <li>And helps in selective re-rendering</li> </ul> </li> <li>Avoid using index as the key because array indexes can change for specific items<ul> <li>Best key is anything that identifies a data item uniquely</li> <li>If no key is provided, react will use the indexes anyway</li> </ul> </li> <li>If the key changes, the component will be re-rendered<ul> <li>So the keys must not change unless custom re-rendering is required</li> </ul> </li> </ul> <pre><code>const List = ({ people }) =&gt; (\n  &lt;div&gt;\n    {people.map((person) =&gt; (\n      &lt;li key={person.id}&gt;\n        &lt;b&gt;{person.name}&lt;/b&gt;\n        &lt;p&gt;{person.description}&lt;/p&gt;\n      &lt;/li&gt;\n    ))}\n  &lt;/div&gt;\n)\nexport default List;\n</code></pre>"},{"location":"react/components#ui-as-tree","title":"UI as Tree","text":"<ul> <li>React uses trees to model relationships between components and modules</li> <li>This also helps in understanding dependencies of components</li> <li>Root node of the tree is the root component of the app</li> </ul>"},{"location":"react/components#hooks","title":"Hooks","text":"<ul> <li>Special functions that are only available while react is rendering</li> <li>They let you hook into different react features</li> <li>Can be thought of as unconditional declarations about the component's needs</li> <li>Can only be called at the top level of components</li> <li>Cannot be called inside conditions, loop or other nested functions</li> <li>Example: useState, useContext, useEffect, etc.</li> </ul>"},{"location":"react/events","title":"Events","text":""},{"location":"react/events#event-handler","title":"Event Handler","text":"<ul> <li>Functions passed to events like onClick, onMouseEnter, etc.</li> <li>These functions should be passed, not called<ul> <li>Calling will execute the function inline</li> </ul> </li> <li>They can be passed as props as well<ul> <li>The names can be customized like 'onSmash', 'onPlay' since they are props</li> <li>This allows to execute different handlers on different conditions or components</li> </ul> </li> </ul> <pre><code>const Button = () =&gt; {\n    const handleClick = () =&gt; {\n        alert(\"Button is clicked!\");\n    };\n\n    return &lt;button onClick={handleClick}&gt;Click&lt;/button&gt;;\n};\nexport default Button;\n</code></pre>"},{"location":"react/events#event-propogation","title":"Event Propogation","text":"<ul> <li>Event handlers will also catch events from any children components</li> <li>Event starts with where it happened and propogates or bubbles up the tree</li> </ul> <pre><code>// Case 1: When the button is clicked,\n// It will first display 'Button' alert, and then 'Toolbar' alert\n// Case 2: When the toolbar is clicked\n// It will display only the 'Toolbar' alert\nconst Toolbar = () =&gt; (\n    &lt;div className=\"Toolbar\" onClick={() =&gt; alert(\"Toolbar\")}&gt;\n        &lt;button onClick={() =&gt; alert(\"Button\")}&gt;Click&lt;/button&gt;\n    &lt;/div&gt;\n);\nexport default Toolbar;\n</code></pre>"},{"location":"react/events#stop-propogation","title":"Stop Propogation","text":"<ul> <li>To prevent an event from reaching the parent component<ul> <li><code>event.stopPropagation()</code> can be called on the event object</li> </ul> </li> </ul> <pre><code>// When the button is clicked, only 'Button' alert is displayed\nconst Toolbar = () =&gt; (\n    &lt;div className=\"Toolbar\" onClick={() =&gt; alert(\"Toolbar\")}&gt;\n        &lt;Button onClick={() =&gt; alert(\"Button\")}&gt;Click&lt;/Button&gt;\n    &lt;/div&gt;\n);\n\nconst Button = ({ onClick, children }) =&gt; {\n    return (\n        &lt;button\n            onClick={(event) =&gt; {\n                event.stopPropagation();\n                onClick();\n            }}\n        &gt;\n            {children}\n        &lt;/button&gt;\n    );\n};\n</code></pre>"},{"location":"react/events#prevent-default","title":"Prevent Default","text":"<ul> <li>Some browser events have default behavior associated with them</li> <li>For example, a 'form' submit event reloads the whole page by default</li> <li>To stop this, <code>e.preventDefault()</code> can be called on the event object</li> </ul> <pre><code>const Signup = () =&gt; (\n    &lt;form\n        onSubmit={(event) =&gt; {\n            event.preventDefault();\n            alert(\"Submitting!\");\n        }}\n    &gt;\n        &lt;input /&gt;\n        &lt;button&gt;Send&lt;/button&gt;\n    &lt;/form&gt;\n);\nexport default Signup;\n</code></pre>"},{"location":"react/state","title":"State","text":"<ul> <li>Helps components to remember things like user inputs, shopping cart, api data</li> <li>Added using 'useState' hook<ul> <li>Takes the initial state value and returns the current state and the state setter</li> <li><code>const [showInput, setShowInput] = useState(false)</code></li> </ul> </li> <li>State is local &amp; private to each component instance</li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Gallery = () =&gt; {\n    const [index, setIndex] = useState(0);\n\n    return (\n        &lt;button\n            onClick={() =&gt; {\n                setIndex(index + 1);\n            }}\n        &gt;\n            Increment\n        &lt;/button&gt;\n    );\n};\nexport default Gallery;\n</code></pre>"},{"location":"react/state#state-vs-regular-variables","title":"State vs Regular Variables","text":"<ul> <li>Local variables don't persist between renders<ul> <li>When react renders a component for second time, it renders from scratch</li> <li>It doesn't consider any changes to the local variables</li> <li>The state variable retains the data between renders</li> </ul> </li> <li>Changes to local variables don't trigger renders<ul> <li>React doesn't realize it needs to render the component again with the new data</li> <li>State setter updates the state variable and triggers re-render</li> </ul> </li> </ul>"},{"location":"react/state#working-of-state","title":"Working of State","text":"<ul> <li>Consider <code>const [index, setIndex] = useState(0)</code></li> <li>When component renders the first time, it will return <code>[0, setIndex]</code></li> <li>When user clicks the button, it calls <code>setIndex(index + 1)</code><ul> <li>This tells react to remember index is 1 now, and triggers another render</li> </ul> </li> <li>During the second render, react still sees <code>useState(0)</code><ul> <li>But it remembers that index was set to 1</li> <li>So it returns <code>[1, setIndex]</code> instead</li> </ul> </li> </ul>"},{"location":"react/state#render-and-commit","title":"Render and Commit","text":"<ul> <li>Before components are displayed on screen, they must be rendered by react<ul> <li>Rendering is like taking snapshot of the UI</li> <li>Component function returns a new jsx snapshot while re-rendering</li> </ul> </li> <li>Triggering a render<ul> <li>Initial render</li> <li>Re-render when state of the component (or one of its ancestor) is updated</li> </ul> </li> <li>Rendering the component<ul> <li>For initial render, DOM nodes are created for html tags</li> <li>For re-render, react calculates which properties have changed since previous render</li> </ul> </li> <li>Committing to the DOM<ul> <li>For initial render, react uses appendChild() of DOM API<ul> <li>To put all the DOM nodes it has created on screen</li> </ul> </li> <li>For re-render, react applies the minimal necessary operations<ul> <li>That were calculated while rendering</li> <li>To make the DOM match the latest rendering output</li> </ul> </li> </ul> </li> <li>Browser render or painting<ul> <li>After rendering is done and react updates the DOM</li> <li>Browser will repaint the screen</li> </ul> </li> </ul>"},{"location":"react/state#state-updates","title":"State Updates","text":"<ul> <li>A state variable's value never changes within a render<ul> <li>Even if its event handler's code is aynchronous</li> </ul> </li> <li>Inside that render's onClick, the state value will continue to be the old value<ul> <li>Because react took the snapshot of the UI</li> </ul> </li> <li>To update state which is an object, spread operator can be used for old values<ul> <li><code>setPerson(...person, department: 'Finance' )</code></li> </ul> </li> <li>To update state which is an array, do not use in place edits (like push, pop, etc.)<ul> <li>Use methods which return a new array (like map, filter, concat, etc.)</li> <li>Or duplicate the array using [...array]</li> </ul> </li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Counter = () =&gt; {\n    const [number, setNumber] = useState(0);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;{number}&lt;/h1&gt;\n            &lt;button\n                onClick={() =&gt; {\n                    // Initial value: 0\n                    // After setting value: 5 (in the next render)\n                    setNumber(number + 5);\n                    // Value shown by alert: 0\n                    // The value will remain same for the current render\n                    // It will be changed in the next render\n                    setTimeout(() =&gt; {\n                        alert(number);\n                    }, 3000);\n                }}\n            &gt;\n                +5\n            &lt;/button&gt;\n        &lt;/&gt;\n    );\n};\nexport default Counter;\n</code></pre>"},{"location":"react/state#consecutive-state-updates","title":"Consecutive State Updates","text":"<ul> <li>React waits until all code in the event handlers has run before processing state updates<ul> <li>This is similar to a waiter taking an order</li> <li>The waiter doesn't run to the kitchen at the mention of your first dish</li> </ul> </li> <li>This lets you update multiple state variables (even from multiple components)<ul> <li>Without triggering too many re-renders</li> <li>This avoids confusing half-finished renders<ul> <li>Where only a few state variables have been updated</li> </ul> </li> <li>This is also known as batching</li> </ul> </li> <li>React does not batch across multiple intentional events like clicks<ul> <li>Each click is handled separately</li> </ul> </li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Counter = () =&gt; {\n    const [number, setNumber] = useState(0);\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;{number}&lt;/h1&gt;\n            &lt;button\n                onClick={() =&gt; {\n                    // Re-render happens only after all these setNumber() calls\n                    // Since the state value remains same during a render\n                    // The value of number will be 0 for all the three calls\n                    setNumber(number + 1); // 1\n                    setNumber(number + 1); // 1\n                    setNumber(number + 1); // 1\n\n                    // To set state based on the previous value, updater function can be used\n                    // React adds that function to its queue\n                    setNumber((n) =&gt; n + 1); // 1\n                    setNumber((n) =&gt; n + 1); // 2\n                    setNumber((n) =&gt; n + 1); // 3\n                }}\n            &gt;\n                +3\n            &lt;/button&gt;\n        &lt;/&gt;\n    );\n};\nexport default Counter;\n</code></pre>"},{"location":"react/managing_state","title":"Managing State","text":"<ul> <li>Instead of manipulating individual pieces of UI directly (imperative UI)<ul> <li>You describe different states that the component can be in</li> <li>And switch between them in response to the user input</li> </ul> </li> <li>This is declarative UI which is better than imperative UI because<ul> <li>State can control multiple behaviors</li> <li>You don't have to write exact instruction for each event</li> </ul> </li> </ul>"},{"location":"react/managing_state#identify-the-components-different-visual-states","title":"Identify the component's different visual states","text":"<ul> <li>For example, a form can have these states<ul> <li>Empty: Form has a disabled 'Submit' button</li> <li>Typing: Form has an enabled 'Submit' button</li> <li>Submitting: Form is completely disabled, spinner is shown</li> <li>Success: 'Thank you' message is shown instead of a form</li> <li>Error: Same as Typing state, but with an extra error message</li> </ul> </li> </ul>"},{"location":"react/managing_state#determine-what-triggers-the-state-changes","title":"Determine what triggers the state changes","text":"<ul> <li>There can be two kinds of trigger<ul> <li>Human inputs, like clicking a button, typing in a field</li> <li>Computer inputs, like receiving network response, timeout, image loaded</li> </ul> </li> <li>For example, a form can have these triggers<ul> <li>Changing the text input: Should switch from Empty to Typing state or back<ul> <li>Depending on whether the text box is empty or not</li> </ul> </li> <li>Clicking the Submit button: Should switch to Submitting state</li> <li>Successful network response: Should switch to Success state</li> <li>Failed network response: Should switch to Error state with the error message</li> </ul> </li> </ul>"},{"location":"react/managing_state#represent-the-state-in-memory-using-usestate","title":"Represent the state in memory using useState","text":"<ul> <li>Start with the state that absolutely must be there</li> <li>Each piece of state is a moving piece and you want as few moving pieces as possible</li> <li>More complexity leads to more bugs</li> </ul>"},{"location":"react/managing_state#remove-any-non-essential-state-variables","title":"Remove any non-essential state variables","text":"<ul> <li>Avoid duplication in the state content so you\u2019re only tracking what is essential<ul> <li>It is difficult to keep duplicate items in sync</li> </ul> </li> <li>Prevent the cases where the state in memory doesn\u2019t represent any valid UI<ul> <li>E.g. Show an error message and disable the input at the same time<ul> <li>How will the user correct the error?</li> </ul> </li> </ul> </li> <li>Prevent paradoxes or contradictions<ul> <li>E.g. isTyping, isSubmitting, and isSuccess can't all be true at the same time<ul> <li>So they can be combined into a single state called 'status'</li> </ul> </li> </ul> </li> <li>Check if the same information is available in another state<ul> <li>E.g. isError is not needed because you can check error !== null instead</li> </ul> </li> <li>Avoid deeply nested state<ul> <li>It is inconvenient to update a single item in large amount of data</li> </ul> </li> </ul>"},{"location":"react/managing_state#connect-event-handlers-to-set-the-state","title":"Connect event handlers to set the state","text":"<ul> <li>Expressing all interactions as state changes<ul> <li>Lets you later introduce new visual states without breaking existing ones</li> </ul> </li> <li>It also lets you change what should be displayed in each state<ul> <li>Without changing the logic of the interaction itself</li> </ul> </li> </ul> <pre><code>import { useState } from \"react\";\n\nconst Form = () =&gt; {\n    const [answer, setAnswer] = useState(\"\");\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(\"typing\");\n\n    if (status === \"success\") return &lt;h1&gt;Submitted&lt;/h1&gt;;\n\n    const handleSubmit = async (e) =&gt; {\n        e.preventDefault();\n        setStatus(\"submitting\");\n        try {\n            await submitForm(answer);\n            setStatus(\"success\");\n        } catch (err) {\n            setStatus(\"typing\");\n            setError(err);\n        }\n    };\n\n    const handleTextChange = (e) =&gt; {\n        setAnswer(e.target.value);\n    };\n\n    return (\n        &lt;form onSubmit={handleSubmit}&gt;\n            &lt;textarea\n                value={answer}\n                onChange={handleTextChange}\n                disabled={status === \"submitting\"}\n            /&gt;\n            &lt;br /&gt;\n            &lt;button disabled={answer.length === 0 || status === \"submitting\"}&gt;\n                Submit\n            &lt;/button&gt;\n            {error !== null &amp;&amp; &lt;p className=\"Error\"&gt;{error.message}&lt;/p&gt;}\n        &lt;/form&gt;\n    );\n};\nexport default Form;\n\nfunction submitForm(answer) {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            if (answer.toLowerCase() !== \"answer\") {\n                reject(new Error(\"Good guess but a wrong answer. Try again!\"));\n            } else {\n                resolve();\n            }\n        }, 1500);\n    });\n}\n</code></pre>"},{"location":"react/managing_state#sharing-state","title":"Sharing State","text":"<ul> <li>Sometimes you want the state of two components to always change together</li> <li>To do that, lift state up<ul> <li>Remove state from both of them and move it to their closest common parent</li> <li>Then pass it down to them via props</li> </ul> </li> </ul> <pre><code>import { useState } from 'react';\n\nconst Accordion = () =&gt; {\n  const [activeIndex, setActiveIndex] = useState(0);\n  return (\n    &lt;&gt;\n      &lt;Panel\n        title='Panel 1'\n        isActive={activeIndex === 0}\n        onShow={() =&gt; setActiveIndex(0)}\n      &gt;\n        Description 1\n      &lt;/Panel&gt;\n      &lt;Panel\n        title='Panel 2'\n        isActive={activeIndex === 1}\n        onShow={() =&gt; setActiveIndex(1)}\n      &gt;\n        Description 1\n      &lt;/Panel&gt;\n    &lt;/&gt;\n  );\n}\nexport default Accordion;\n\nconst Panel({ title, children, isActive, onShow }) =&gt; (\n  &lt;section className='panel'&gt;\n    &lt;h3&gt;{title}&lt;/h3&gt;\n    {isActive ? &lt;p&gt;{children}&lt;/p&gt; : &lt;button onClick={onShow}&gt;Show&lt;/button&gt;}\n  &lt;/section&gt;\n);\n</code></pre>"},{"location":"react/preserving_and_resetting_state","title":"Preserving and Resetting State","text":"<ul> <li>React builds render trees for the component structure in your UI</li> <li>When you give state to a component, you might think it lives inside the component<ul> <li>But the state is actually held inside React</li> <li>React associates each piece of state it\u2019s holding with the correct component</li> <li>By where that component sits in the render tree</li> </ul> </li> <li>React will keep the state around as long as you render<ul> <li>The same component at the same position in the tree</li> <li>If it gets removed or a different component gets rendered at the same position<ul> <li>React discards its state</li> </ul> </li> </ul> </li> <li>State behavior<ul> <li>Two identical components rendered at two different places<ul> <li>Will preserve individual states</li> </ul> </li> <li>Two identical components rendered at the same place<ul> <li>Will preserve the same state</li> <li>This happens commonly in conditional rendering</li> </ul> </li> <li>Two different components rendered at the same place (conditional rendering)<ul> <li>Will destroy &amp; reset the state when the component is switched</li> </ul> </li> </ul> </li> </ul> <pre><code>const App = () =&gt; {\n    const counter = &lt;Counter /&gt;;\n    const [isFancy, setIsFancy] = useState(0);\n    return (\n        &lt;div&gt;\n            {/* These are two separate counters */}\n            {/* Because each is rendered at its own position in the tree */}\n            {/* Each of them will get its own independent score state */}\n            {counter}\n            {counter}\n\n            {/* These counters are rendered at the same position in the tree */}\n            {/* So this will preserve the score state */}\n            {/* Toggling isFancy state won't change the value of the score */}\n            {isFancy ? &lt;Counter isFancy={true} /&gt; : &lt;Counter isFancy={false} /&gt;}\n\n            {/* Toggling isPaused or isFancy will reset the state of the counter */}\n            {/* The structure should be same to preserve the state */}\n            {isPaused ? &lt;p&gt;See you later!&lt;/p&gt; : &lt;Counter /&gt;}\n            {isFancy ? (\n                &lt;div&gt;\n                    {\" \"}\n                    &lt;Counter isFancy={true} /&gt;{\" \"}\n                &lt;/div&gt;\n            ) : (\n                &lt;section&gt;\n                    {\" \"}\n                    &lt;Counter isFancy={false} /&gt;{\" \"}\n                &lt;/section&gt;\n            )}\n        &lt;/div&gt;\n    );\n};\nexport default App;\n\nconst Counter = () =&gt; {\n    const [score, setScore] = useState(0);\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;{score}&lt;/h1&gt;\n            &lt;button onClick={() =&gt; setScore(score + 1)}&gt;Add one&lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>"},{"location":"react/preserving_and_resetting_state#avoid-nested-declarations","title":"Avoid Nested Declarations","text":"<pre><code>const MyComponent = () =&gt; {\n    const [counter, setCounter] = useState(0);\n\n    const MyTextField = () =&gt; {\n        const [text, setText] = useState(\"\");\n        return &lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;;\n    };\n\n    return (\n        &lt;&gt;\n            {/* Every time the button is clicked, MyTextField will re-render */}\n            {/* and the input will disappear. This is because the function MyTextField */}\n            {/* is created for every render. Hence, always declare component functions */}\n            {/* at the top level and don't nest their definitions */}\n            &lt;MyTextField /&gt;\n            &lt;button\n                onClick={() =&gt; {\n                    setCounter(counter + 1);\n                }}\n            &gt;\n                Clicked {counter} times\n            &lt;/button&gt;\n        &lt;/&gt;\n    );\n};\nexport default MyComponent;\n</code></pre>"},{"location":"react/preserving_and_resetting_state#deliberate-state-reset","title":"Deliberate State Reset","text":"<ul> <li>By default, react preserves state of a component while it stays at the same position</li> <li>But sometimes, you may want to reset a component\u2019s state</li> <li>There are two ways to reset state and switching components<ul> <li>Render components in different positions<ul> <li>Not scalable if there are many components</li> </ul> </li> <li>Give each component an explicit identity with key<ul> <li>Keys let you tell React that this is not just a first counter<ul> <li>Or a second counter, but a specific counter</li> </ul> </li> <li>Note that keys are not globally unique<ul> <li>They only specify the position within the parent</li> </ul> </li> </ul> </li> </ul> </li> </ul> <pre><code>const Scoreboard = () =&gt; {\n    const [isPlayerA, setIsPlayerA] = useState(true);\n    return (\n        &lt;div&gt;\n            {/* Initially isPlayerA is true, so the first position contains Counter state */}\n            {/* When the button is clicked, the first position clears and state is destroyed */}\n            {isPlayerA &amp;&amp; &lt;Counter person=\"Taylor\" /&gt;}\n            {/* Initially isPlayerA is true, so the seconds position is empty */}\n            {!isPlayerA &amp;&amp; &lt;Counter person=\"Sarah\" /&gt;}\n\n            {/* Specifying a key tells React to use the key itself as part of the position */}\n            {/* instead of their order within the parent */}\n            {isPlayerA ? (\n                &lt;Counter key=\"Taylor\" person=\"Taylor\" /&gt;\n            ) : (\n                &lt;Counter key=\"Sarah\" person=\"Sarah\" /&gt;\n            )}\n\n            &lt;button\n                onClick={() =&gt; {\n                    setIsPlayerA(!isPlayerA);\n                }}\n            &gt;\n                Next player!\n            &lt;/button&gt;\n        &lt;/div&gt;\n    );\n};\nexport default Scoreboard;\n</code></pre>"},{"location":"react/reducer","title":"Reducer","text":"<ul> <li>Components with many state updates spread across many event handlers can get overwhelming</li> <li>Reducer is used to consolidate state update logic outside the component for such cases</li> <li>It helps to cut down the code if many handlers modify state in a similar way</li> </ul>"},{"location":"react/reducer#migrating-from-state-to-reducer","title":"Migrating from State to Reducer","text":"<ul> <li>Move from setting state to dispatching actions<ul> <li>Instead of telling react 'what to do' by setting state</li> <li>Specify 'what the user just did' by dispatching 'actions' from event handlers</li> <li>The state update logic will live elsewhere</li> </ul> </li> <li>Write a reducer function<ul> <li>Where state logic is written</li> <li>Takes two arguments, the current state and the action object</li> <li>Returns the next state</li> <li>It's convention to use switch statements for different values for readability</li> </ul> </li> <li>Use the reducer from your component<ul> <li>Replace useState to useReducer</li> <li><code>const [tasks, setTasks] = useState(initialTasks);</code></li> <li><code>const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);</code></li> </ul> </li> </ul> <pre><code>import { useReducer } from \"react\";\n\nconst TaskApp = () =&gt; {\n    const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n    const handleAddTask = (text) =&gt; {\n        dispatch({ type: \"added\", id: generateNextId(), text: text });\n    };\n    const handleChangeTask = (task) =&gt; {\n        dispatch({ type: \"changed\", task: task });\n    };\n    const handleDeleteTask = (taskId) =&gt; {\n        dispatch({ type: \"deleted\", id: taskId });\n    };\n\n    return (\n        &lt;&gt;\n            &lt;AddTask onAddTask={handleAddTask} /&gt;\n            &lt;TaskList\n                tasks={tasks}\n                onChangeTask={handleChangeTask}\n                onDeleteTask={handleDeleteTask}\n            /&gt;\n        &lt;/&gt;\n    );\n};\nexport default TaskApp;\n\nconst tasksReducer = (tasks, action) =&gt; {\n    // It's recommended wrapping each case block into curly braces\n    // so that variables within different cases don't clash with each other\n    switch (action.type) {\n        case \"added\": {\n            return [\n                ...tasks,\n                { id: action.id, text: action.text, done: false },\n            ];\n        }\n        case \"changed\": {\n            return tasks.map((t) =&gt;\n                t.id === action.task.id ? action.task : t\n            );\n        }\n        case \"deleted\": {\n            return tasks.filter((t) =&gt; t.id !== action.id);\n        }\n        default: {\n            throw Error(\"Unknown action: \" + action.type);\n        }\n    }\n};\n</code></pre>"},{"location":"react/context.","title":"Context","text":"<ul> <li>Usually information is passed from parent to child component via props<ul> <li>But it can become verbose and inconvenient if there are many middle components</li> <li>Or if many components need the same information</li> <li>This can lead to a situation called prop drilling</li> </ul> </li> <li>Context lets the parent component make information available<ul> <li>To any component in the tree below without explicitly through props</li> </ul> </li> <li>Before using context<ul> <li>Start by passing props and see if context is really required</li> <li>Use jsx as children to reduce the number of layers<ul> <li>E.g. let's say you pass data props to visual components that don't use them directly<ul> <li>Like this:  <li>Use this instead:  <li>Uses cases for context<ul> <li>Theming: Styling &amp; appearance (e.g. dark mode)</li> <li>Currently logged in user</li> <li>Routing: So that every link knows whether it's active or not</li> <li>Managing state: Many distant components may want to change the state</li> </ul> </li> <pre><code>// LevelContext.js\nimport { createContext } from 'react';\n\nexport const LevelContext = createContext(0);\n\n// Section.js\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nconst Section = ({ children }) =&gt; {\n  const level = useContext(LevelContext);\n  return (\n    &lt;section className=\"section\"&gt;\n      &lt;LevelContext.Provider value={level + 1}&gt;\n        {children}\n      &lt;/LevelContext.Provider&gt;\n    &lt;/section&gt;\n  );\n}\nexport default Section;\n\n// Header.js\nimport { useContext } from 'react';\nimport { LevelContext } from './LevelContext.js';\n\nconst Heading = ({ children }) =&gt; {\n  const level = useContext(LevelContext);\n  switch (level) {\n    case 1:\n      return &lt;h1&gt;{children}&lt;/h1&gt;;\n    case 2:\n      return &lt;h2&gt;{children}&lt;/h2&gt;;\n    case 3:\n      return &lt;h3&gt;{children}&lt;/h3&gt;;\n    default:\n      throw Error('Unknown level: ' + level);\n  }\n}\nexport default Heading;\n\n// App.js\nimport Heading from './Heading.js';\nimport Section from './Section.js';\n\nconst Page = () =&gt; {\n  return (\n    &lt;Section&gt;\n      &lt;Heading&gt;Title&lt;/Heading&gt;\n      &lt;Section&gt;\n        &lt;Heading&gt;Heading&lt;/Heading&gt;\n        &lt;Section&gt;\n          &lt;Heading&gt;Sub-heading&lt;/Heading&gt;\n        &lt;/Section&gt;\n      &lt;/Section&gt;\n    &lt;/Section&gt;\n  );\n}\nexport default Page;\n</code></pre>"},{"location":"react/scaling_with_reducer_and_context","title":"Scaling with Reducer and Context","text":"<ul> <li>It is common to use a reducer together with context to manage complex state<ul> <li>And pass it down to distant components without too much hassle</li> <li>This avoids passing state &amp; event handlers as props to each &amp; every component</li> </ul> </li> <li>If you pass a different value on the next render<ul> <li>React will update all the components reading it below</li> </ul> </li> </ul> <pre><code>// TasksContext.js\nimport { createContext, useContext, useReducer } from \"react\";\n\nconst TasksContext = createContext(null);\nconst TasksDispatchContext = createContext(null);\n\nexport function TasksProvider({ children }) {\n    const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n\n    return (\n        &lt;TasksContext.Provider value={tasks}&gt;\n            &lt;TasksDispatchContext.Provider value={dispatch}&gt;\n                {children}\n            &lt;/TasksDispatchContext.Provider&gt;\n        &lt;/TasksContext.Provider&gt;\n    );\n}\n\n// Functions like useTasks and useTasksDispatch are called Custom Hooks\nexport function useTasks() {\n    return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n    return useContext(TasksDispatchContext);\n}\n\nfunction tasksReducer(tasks, action) {\n    switch (action.type) {\n        case \"added\": {\n            return [\n                ...tasks,\n                { id: action.id, text: action.text, done: false },\n            ];\n        }\n        case \"changed\": {\n            return tasks.map((t) =&gt;\n                t.id === action.task.id ? action.task : t\n            );\n        }\n        case \"deleted\": {\n            return tasks.filter((t) =&gt; t.id !== action.id);\n        }\n        default: {\n            throw Error(\"Unknown action: \" + action.type);\n        }\n    }\n}\n</code></pre> <pre><code>// App.js\nimport AddTask from \"./AddTask.js\";\nimport TaskList from \"./TaskList.js\";\nimport { TasksProvider } from \"./TasksContext.js\";\n\nexport default function TaskApp() {\n    return (\n        &lt;TasksProvider&gt;\n            &lt;AddTask /&gt;\n            &lt;TaskList /&gt;\n        &lt;/TasksProvider&gt;\n    );\n}\n</code></pre> <pre><code>// AddTask.js\nimport { useState, useContext } from \"react\";\nimport { TasksDispatchContext } from \"./TasksContext.js\";\n\nexport default function AddTask() {\n    const [text, setText] = useState(\"\");\n    const dispatch = useContext(TasksDispatchContext);\n\n    const handleTaskAdd = () =&gt; {\n        setText(\"\");\n        dispatch({ type: \"added\", id: generateNextId(), text: text });\n    };\n\n    return (\n        &lt;&gt;\n            &lt;input\n                placeholder=\"Add task\"\n                value={text}\n                onChange={(e) =&gt; setText(e.target.value)}\n            /&gt;\n            &lt;button onClick={handleTaskAdd}&gt;Add&lt;/button&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> <pre><code>// TaskList.js\nimport { useState, useContext } from \"react\";\nimport { TasksContext, TasksDispatchContext } from \"./TasksContext.js\";\n\nexport default function TaskList() {\n    const tasks = useContext(TasksContext);\n    return (\n        &lt;ul&gt;\n            {tasks.map((task) =&gt; (\n                &lt;li key={task.id}&gt;\n                    &lt;Task task={task} /&gt;\n                &lt;/li&gt;\n            ))}\n        &lt;/ul&gt;\n    );\n}\n\nfunction Task({ task }) {\n    const [isEditing, setIsEditing] = useState(false);\n    const dispatch = useContext(TasksDispatchContext);\n\n    const handleTaskEdit = (e) =&gt; {\n        dispatch({ type: \"changed\", task: { ...task, text: e.target.value } });\n    };\n    const handleTaskDone = (e) =&gt; {\n        dispatch({\n            type: \"changed\",\n            task: { ...task, done: e.target.checked },\n        });\n    };\n    const handleTaskDelete = () =&gt; {\n        dispatch({ type: \"deleted\", id: task.id });\n    };\n\n    const renderTaskEdit = () =&gt; (\n        &lt;&gt;\n            &lt;input value={task.text} onChange={handleTaskEdit} /&gt;\n            &lt;button onClick={() =&gt; setIsEditing(false)}&gt;Save&lt;/button&gt;\n        &lt;/&gt;\n    );\n    const renderTaskText = () =&gt; (\n        &lt;&gt;\n            {task.text}\n            &lt;button onClick={() =&gt; setIsEditing(true)}&gt;Edit&lt;/button&gt;\n        &lt;/&gt;\n    );\n\n    return (\n        &lt;label&gt;\n            &lt;input\n                type=\"checkbox\"\n                checked={task.done}\n                onChange={handleTaskDone}\n            /&gt;\n            {isEditable ? renderTaskEdit() : renderTaskText()}\n            &lt;button onClick={handleTaskDelete}&gt;Delete&lt;/button&gt;\n        &lt;/label&gt;\n    );\n}\n</code></pre>"},{"location":"react/refs","title":"Refs","text":"<ul> <li>Used when you want a component to remember some information<ul> <li>But you don't want that to trigger new renders</li> </ul> </li> <li>Treat refs as an escape hatch to hold onto values that aren't used for rendering<ul> <li>Useful when you work with external systems or browser APIs</li> <li>If much of the application logic and data flow relies on refs, rethink the approach</li> </ul> </li> <li>Like state, refs are retained by react between re-renders<ul> <li>But setting state re-renders a component while changing a ref does not</li> </ul> </li> <li>Defined like <code>const ref = useRef(0)</code><ul> <li>Returns an object like <code>{ current: 0 }</code></li> <li>Current value of ref can be accessed like <code>ref.current</code></li> <li>This value is intentionally mutable (both read &amp; write are possible)</li> </ul> </li> <li>Ref can point to anything: number, string, object, function<ul> <li>It is a plain javascript object with the current property</li> <li>The most common use case is to access a DOM element like <code>&lt;div ref={myRef}&gt;</code></li> </ul> </li> </ul> <pre><code>import { useRef } from \"react\";\n\nexport default function Counter() {\n    let ref = useRef(0);\n\n    function handleClick() {\n        ref.current = ref.current + 1;\n        // Since this is being shown in alert, ref works here\n        // Ref can update value and component doesn't have to be re-rendered\n        // But if this was being shown in UI (Within button or a separate div)\n        // The update value won't be shown because ref doesn't re-render these component\n        // In that case, state should be used\n        alert(\"You clicked \" + ref.current + \" times!\");\n    }\n\n    return &lt;button onClick={handleClick}&gt;Click me!&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/refs#ref-workflow","title":"Ref Workflow","text":"<ul> <li>In react, every update is split in two phases<ul> <li>During render, react calls the component to figure what should be on the screen</li> <li>During commit, react applies changes to the DOM</li> </ul> </li> <li>In general, you don\u2019t want to access refs during rendering<ul> <li>During the first render<ul> <li>DOM nodes have not been created yet, so ref.current will be null</li> </ul> </li> <li>During the rendering of updates<ul> <li>DOM nodes haven\u2019t been updated yet, so it\u2019s too early to read them</li> </ul> </li> <li>If some side effect is required<ul> <li>useEffect should be used to move it out of the rendering calculation</li> <li>It will let react update the screen first, and then run the side effect</li> </ul> </li> </ul> </li> <li>React sets ref.current during the commit<ul> <li>Before updating the DOM, react sets the affected ref.current values to null</li> <li>After updating the DOM, react immediately sets them to the corresponding DOM nodes</li> </ul> </li> <li>Usually, you will access refs from event handlers<ul> <li>If you want to do something with a ref, there is no particular event</li> <li>You might need an Effect</li> </ul> </li> </ul> <pre><code>import { useState, useRef } from \"react\";\n\nfunction VideoPlayer({ src, isPlaying }) {\n    const ref = useRef(null);\n\n    if (isPlaying) {\n        // Calling these while rendering isn't allowed\n        // Rendering should be a pure calculation of jsx\n        // It should not contain side effects like modifying the DOM\n        // Moreover, ref.current will be null because its DOM does not exist yet\n        // Or if it's a re-render, ref.current will have the old DOM node\n        ref.current.play();\n    } else {\n        ref.current.pause();\n    }\n\n    return &lt;video ref={ref} src={src} /&gt;;\n}\n</code></pre>"},{"location":"react/refs#state-and-ref","title":"State and Ref","text":"<ul> <li>When a piece of information is used for rendering<ul> <li>Keep it in state</li> </ul> </li> <li>When a piece of information is only needed by event handlers<ul> <li>And changing it doesn\u2019t require a re-render</li> <li>Using a ref may be more efficient</li> </ul> </li> <li>You shouldn't read or write the current value of ref during rendering<ul> <li>Because changing ref doesn't re-render the component</li> <li>But changes to ref are reflected immediately unlike state</li> </ul> </li> <li>You can read state at any time<ul> <li>But each render has its own snapshot of state which does not change</li> </ul> </li> </ul> <pre><code>import { useState, useRef } from \"react\";\n\nexport default function Stopwatch() {\n    const [startTime, setStartTime] = useState(null);\n    const [now, setNow] = useState(null);\n    const intervalRef = useRef(null);\n\n    function handleStart() {\n        setStartTime(Date.now());\n        setNow(Date.now());\n\n        clearInterval(intervalRef.current);\n        // Set now to current time every 10 milliseconds\n        intervalRef.current = setInterval(() =&gt; {\n            setNow(Date.now());\n        }, 10);\n    }\n\n    function handleStop() {\n        clearInterval(intervalRef.current);\n    }\n\n    // Since interval updates now every 10 milliseconds\n    // This will re-render and show time elapsed every s10 milliseconds\n    let secondsPassed = 0;\n    if (startTime != null &amp;&amp; now != null) {\n        secondsPassed = (now - startTime) / 1000;\n    }\n\n    return (\n        &lt;&gt;\n            &lt;h1&gt;Time passed: {secondsPassed.toFixed(3)}&lt;/h1&gt;\n            &lt;button onClick={handleStart}&gt;Start&lt;/button&gt;\n            &lt;button onClick={handleStop}&gt;Stop&lt;/button&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"react/refs#manipulting-dom-with-refs","title":"Manipulting DOM with Refs","text":"<ul> <li>React automatically updates DOM to match your render output<ul> <li>So your components won't often need to manipulate it</li> </ul> </li> <li>But sometimes you need access to DOM elements managed by react<ul> <li>For example, to focus a node, scroll to it, or measure its size &amp; position</li> </ul> </li> <li>If you stick to non-destructive actions like focusing and scrolling<ul> <li>You shouldn\u2019t encounter any problems</li> </ul> </li> <li>However, if you try to modify the DOM manually<ul> <li>You can risk conflicting with the changes React is making</li> <li>E.g. forcefully removing a div that is controlled by conditional rendering &amp; state</li> </ul> </li> </ul> <pre><code>import { useRef } from \"react\";\n\nexport default function Form() {\n    const inputRef = useRef(null);\n\n    function handleClick() {\n        inputRef.current.focus();\n    }\n\n    return (\n        &lt;&gt;\n            &lt;input ref={inputRef} /&gt;\n            &lt;button onClick={handleClick}&gt;Focus the input&lt;/button&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"react/refs#accessing-another-components-dom-nodes","title":"Accessing another component's DOM nodes","text":"<ul> <li>If you try to put a ref on your own component like <code>&lt;MyInput ref={inputRef}/&gt;</code><ul> <li>By default you will get null</li> <li>This is intentional because refs are escape hatch that should be used sparingly</li> <li>Manually manipulating another component's DOM nodes makes your code fragile</li> </ul> </li> <li>Components that want to expose their DOM nodes have to opt in to that behavior<ul> <li>A component can specify that it forwards its ref to one of its children</li> <li>MyInput can use the forwardRef API to achieve this</li> </ul> </li> </ul> <pre><code>import { forwardRef, useRef } from \"react\";\n\nconst MyInput = forwardRef((props, ref) =&gt; {\n    return &lt;input {...props} ref={ref} /&gt;;\n});\n\nexport default function Form() {\n    const inputRef = useRef(null);\n\n    function handleClick() {\n        inputRef.current.focus();\n    }\n\n    return (\n        &lt;&gt;\n            &lt;MyInput ref={inputRef} /&gt;\n            &lt;button onClick={handleClick}&gt;Focus the input&lt;/button&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre>"},{"location":"react/effects","title":"Effect","text":"<ul> <li>Some components need to synchronize with external systems<ul> <li>Control a non-react component based on react state</li> <li>Set up a server connection</li> <li>Send an analytics log when a component appears on the screen</li> </ul> </li> <li>Effects let you run some code after rendering<ul> <li>So that component can be synchronized with some system outside of react</li> <li>Like network or a third party library</li> </ul> </li> <li>Effects let you specify side effects that are caused by rendering itself<ul> <li>Rather than by a particular event</li> <li>Like a chatroom component that must connect to chat server whenever it's visible</li> </ul> </li> </ul>"},{"location":"react/effects#application","title":"Application","text":"<ul> <li>Rendering should be a pure calculation of jsx</li> <li>It should not contain side effects like modifying the DOM</li> <li>So using ref won't work<ul> <li>During first render, ref.current will be null because its DOM does not exist yet</li> <li>During re-render, ref.current will have the old DOM node</li> </ul> </li> <li>By wrapping the DOM update in an Effect<ul> <li>You let React update the screen first and then run your side effect</li> </ul> </li> </ul>"},{"location":"react/effects#working","title":"Working","text":"<ul> <li>Effects run at the end of a commit after the screen updates<ul> <li>By default, they run after every render</li> </ul> </li> <li>But they should only run when needed, this can be achieved by specifying dependencies<ul> <li>If dependencies are not handled properly, it might produce an infinite loop</li> <li>E.g. you don't want to re-connect to the server after every keystoke</li> </ul> </li> </ul> <pre><code>// This will create an infinite loop\n// Setting state triggers rendering and rendering triggers useEffect\nconst [count, setCount] = useState(0);\nuseEffect(() =&gt; {\n    setCount(count + 1);\n});\n\nuseEffect(() =&gt; {\n    // This runs after every render\n});\n\nuseEffect(() =&gt; {\n    // This runs only on mount (when the component appears)\n}, []);\n\nuseEffect(() =&gt; {\n    // This runs on mount and if either a or b have changed since the last render\n}, [a, b]);\n</code></pre>"},{"location":"react/effects#re-runs-and-unmounts","title":"Re-runs and Unmounts","text":"<ul> <li>Imagine a component (ChatRoom) is a part of a larger app with many different screens<ul> <li>The user starts their journey on the ChatRoom page</li> <li>The component mounts and calls connection.connect()</li> </ul> </li> <li>Then imagine the user navigates to another screen, like Settings page<ul> <li>The ChatRoom component unmounts</li> </ul> </li> <li>Finally, the user clicks Back and ChatRoom mounts again<ul> <li>This would set up a second connection</li> <li>But the first connection was never destroyed!</li> <li>As the user navigates across the app, the connections would keep piling up</li> </ul> </li> <li>To handle this, a cleanup function can be added<ul> <li>React will call the cleanup function each time before the effect runs again</li> <li>And when the component unmounts</li> </ul> </li> <li>Bugs like this are easy to miss without extensive manual testing<ul> <li>To help you spot them quickly in development</li> <li>React remounts every component once immediately after its initial mount</li> <li>So useEffect will essentially run twice in development</li> <li>Turning off strict mode will opt out of this development behavior</li> </ul> </li> <li>In the example below<ul> <li>Without cleanup function, it will log 'Connecting', 'Connecting'</li> <li>With cleanup function, it will log 'Connecting', 'Disconnected', 'Connecting'</li> </ul> </li> </ul> <pre><code>import { useEffect } from \"react\";\nimport { createConnection } from \"./chat.js\";\n\nexport default function ChatRoom() {\n    useEffect(() =&gt; {\n        const connection = createConnection();\n        connection.connect();\n        // Cleanup function\n        return () =&gt; connection.disconnect();\n    }, []);\n}\n\nexport function createConnection() {\n    return {\n        connect() {\n            console.log(\"Connecting\");\n        },\n        disconnect() {\n            console.log(\"Disconnected\");\n        },\n    };\n}\n</code></pre>"},{"location":"react/effects#cleanup-functions","title":"Cleanup Functions","text":"<ul> <li>If remounting breaks the logic of the app, it usually uncovers existing bugs</li> <li>Effects are fired twice in development mode to catch these bugs</li> </ul> <pre><code>// Cleanup not required since the value of zoomLevel will remain the same\n// And hence useEffect won't be executed again\nuseEffect(() =&gt; {\n    mapRef.current.setZoomLevel(zoomLevel);\n}, [zoomLevel]);\n\n// Cleanup is required or else showModel will execute twice\nuseEffect(() =&gt; {\n    dialogRef.current.showModal();\n    return () =&gt; dialog.close();\n}, []);\n\n// Subscribing to events: Cleanup function should unsubscribe\nuseEffect(() =&gt; {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () =&gt; window.removeEventListener(\"scroll\", handleScroll);\n}, []);\n\n// Fetching data\n// Cleanup function should either abort the fetch or ignore its result\n// Network request that already happened can't be undone, but it should not affect the app\n// Hence if the userId changes, the old response should be ignored\nuseEffect(() =&gt; {\n    let ignore = false;\n\n    async function startFetching() {\n        const json = await fetchTodos(userId);\n        if (!ignore) setTodos(json);\n    }\n    startFetching();\n\n    return () =&gt; {\n        ignore = true;\n    };\n}, [userId]);\n</code></pre>"},{"location":"react/unnecessary_effects_1","title":"Unnecessary Effects 1","text":""},{"location":"react/unnecessary_effects_1#tranforming-data","title":"Tranforming Data","text":"<ul> <li>You don\u2019t need Effects to transform data for rendering<ul> <li>For example, let\u2019s say you want to filter a list before displaying it</li> <li>You might feel tempted to write an Effect to update state when the list changes</li> </ul> </li> <li>When you update the state<ul> <li>React will first call your component functions to get the changes</li> <li>Then commit these changes to the DOM updating the screen</li> <li>Then run your Effects</li> </ul> </li> <li>If your Effect also updates the state, it restarts the whole process from scratch<ul> <li>To avoid the unnecessary render passes</li> <li>Transform all the data at the top level of your components</li> <li>That code will automatically re-run whenever your props or state change</li> </ul> </li> </ul>"},{"location":"react/unnecessary_effects_1#user-events","title":"User Events","text":"<ul> <li>You don\u2019t need Effects to handle user events<ul> <li>For example, let\u2019s say you want to send an /api/buy POST request</li> <li>And show a notification when the user buys a product</li> </ul> </li> <li>In the Buy button click event handler, you know exactly what happened<ul> <li>By the time an Effect runs, you don\u2019t know what the user did (which button was clicked)</li> <li>This is why you\u2019ll usually handle user events in the event handlers</li> </ul> </li> </ul>"},{"location":"react/unnecessary_effects_1#dependent-state","title":"Dependent State","text":"<ul> <li>When something can be calculated from the existing props or state<ul> <li>Don\u2019t put it in state, calculate it during rendering instead</li> </ul> </li> <li>This makes your code<ul> <li>Faster as you avoid the extra cascading updates</li> <li>Simpler as you remove some code</li> <li>Less error-prone as you avoid bugs due to state variables getting out of sync</li> </ul> </li> <li>Suppose you have a component with two state variables: firstName and lastName<ul> <li>You want to calculate a fullName by concatenating them</li> <li>Your first instinct might be to add a fullName state and update it in an Effect</li> </ul> </li> <li>This is more complicated than necessary and inefficient too<ul> <li>It does an entire render pass with a stale value for fullName</li> <li>Then immediately re-renders with the updated value</li> </ul> </li> </ul> <pre><code>// Avoid: redundant state and unnecessary Effect\nfunction Form() {\n    const [firstName, setFirstName] = useState(\"Taylor\");\n    const [lastName, setLastName] = useState(\"Swift\");\n\n    const [fullName, setFullName] = useState(\"\");\n    useEffect(() =&gt; {\n        setFullName(firstName + \" \" + lastName);\n    }, [firstName, lastName]);\n}\n\n// Good: calculated during rendering\nfunction Form() {\n    const [firstName, setFirstName] = useState(\"Taylor\");\n    const [lastName, setLastName] = useState(\"Swift\");\n    const fullName = firstName + \" \" + lastName;\n}\n</code></pre>"},{"location":"react/unnecessary_effects_1#caching-calculations-usememo","title":"Caching Calculations (useMemo)","text":"<ul> <li>If a component receives todos from props and filters them<ul> <li>You might feel tempted to store the result in state and update it from an Effect</li> <li>This is both unnecessary and inefficient</li> </ul> </li> <li>You can filter them while rendering if it is not slow<ul> <li>But if you have a lot of todos or the filtering is slow</li> <li>You can cache (or memoize) an expensive calculation by wrapping it in a useMemo Hook</li> </ul> </li> <li>If dependencies change, useMemo will run the function again and store its result<ul> <li>Otherwise it will return the last result it has stored</li> </ul> </li> </ul> <pre><code>// Avoid: redundant state and unnecessary Effect\nfunction TodoList({ todos, filter }) {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [visibleTodos, setVisibleTodos] = useState([]);\n\n    useEffect(() =&gt; {\n        setVisibleTodos(getFilteredTodos(todos, filter));\n    }, [todos, filter]);\n}\n\n// This is fine if getFilteredTodos() is not slow\nfunction TodoList({ todos, filter }) {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const visibleTodos = getFilteredTodos(todos, filter);\n}\n\n// Does not re-run getFilteredTodos() unless todos or filter change\nimport { useMemo, useState } from \"react\";\n\nfunction TodoList({ todos, filter }) {\n    const [newTodo, setNewTodo] = useState(\"\");\n    const visibleTodos = useMemo(() =&gt; {\n        return getFilteredTodos(todos, filter);\n    }, [todos, filter]);\n}\n\n// To measure the processing time, you can do this\nconsole.time(\"filter array\");\nconst visibleTodos = getFilteredTodos(todos, filter);\nconsole.timeEnd(\"filter array\");\n</code></pre>"},{"location":"react/unnecessary_effects_1#resetting-state","title":"Resetting State","text":"<ul> <li>Consider a ProfilePage component having comment input stored in a state variable<ul> <li>That does not get reset when you navigate from one profile to another</li> <li>It\u2019s easy to accidentally post a comment on a wrong user\u2019s profile</li> <li>To fix this, you clear the comment state whenever the userId changes</li> </ul> </li> <li>This is inefficient because<ul> <li>ProfilePage and its children will first render with the stale value</li> <li>And then render again</li> </ul> </li> <li>It is also complicated because<ul> <li>You\u2019d need to do this in every component that has some state inside ProfilePage</li> <li>E.g. if the comment UI is nested, you\u2019d want to clear out nested comment state too</li> </ul> </li> <li>Instead, you can specify that each user\u2019s profile is conceptually a different profile<ul> <li>By giving it an explicit key</li> <li>Split your component in two and pass a key from the outer to the inner component</li> </ul> </li> </ul> <pre><code>// Avoid: Resetting state on prop change in an Effect\nexport default function ProfilePage({ userId }) {\n  const [comment, setComment] = useState('');\n  useEffect(() =&gt; { setComment(''); }, [userId]);\n}\n\n// State in Profile and below will reset automatically on key change\nexport default function ProfilePage({ userId }) {\n  return &lt;Profile userId={userId} key={userId}/&gt;\n}\nfunction Profile({ userId }) {\n  const [comment, setComment] = useState('');\n}\n</code></pre>"},{"location":"react/unnecessary_effects_1#adjusting-state-on-prop-change","title":"Adjusting State on Prop Change","text":"<ul> <li>Sometimes you might want to reset or adjust a part of the state on a prop change<ul> <li>Consider a List component that maintains the selected item</li> <li>You want to reset the selection whenever the items prop changes</li> </ul> </li> <li>If we handle this in useEffect, then every time the items change<ul> <li>The List and its child components will render with a stale selection value</li> <li>After the useEffect runs, it will re-render the List and its child components</li> </ul> </li> <li>Instead, adjust the state directly during rendering<ul> <li>This will trigger re-render immediately after it exists with a return statement</li> <li>Since the selection value is stale, it skips re-rendering the List children</li> <li>This approach is better but most components shouldn't need this either</li> </ul> </li> <li>Adjusting state based on props or other state makes your data flow complex<ul> <li>Always check whether you can reset all state with a key</li> <li>Or calculate everything during rendering instead</li> <li>So instead of storing (and resetting) the selected item in state variable<ul> <li>You can store the selected item ID as regular variable</li> <li>There is no need to adjust the state at all</li> </ul> </li> </ul> </li> </ul> <pre><code>// Avoid: Adjusting state on prop change in an Effect\nfunction List({ items }) {\n    const [isReverse, setIsReverse] = useState(false);\n    const [selection, setSelection] = useState(null);\n\n    useEffect(() =&gt; {\n        setSelection(null);\n    }, [items]);\n}\n\n// Better: Adjust the state while rendering\nfunction List({ items }) {\n    const [isReverse, setIsReverse] = useState(false);\n    const [selection, setSelection] = useState(null);\n\n    const [prevItems, setPrevItems] = useState(items);\n    if (items !== prevItems) {\n        setPrevItems(items);\n        setSelection(null);\n    }\n}\n\n// Best: Calculate everything during rendering\nfunction List({ items }) {\n    const [isReverse, setIsReverse] = useState(false);\n    const [selectedId, setSelectedId] = useState(null);\n\n    const selection = items.find((item) =&gt; item.id === selectedId) ?? null;\n}\n</code></pre>"},{"location":"react/unnecessary_effects_2","title":"Unnecessary Effects 2","text":""},{"location":"react/unnecessary_effects_2#sharing-logic-between-event-handlers","title":"Sharing Logic between Event Handlers","text":"<ul> <li>Let\u2019s say you have a product page with buy and checkout buttons<ul> <li>You want to show a notification whenever the user puts a product in the cart</li> <li>Calling showNotification() in click handlers of both buttons feels repetitive</li> <li>So you might be tempted to place this logic in an Effect</li> </ul> </li> <li>This Effect is unnecessary and can cause bugs<ul> <li>Let's say the app remembers the cart between page reloads</li> <li>If you add a product to the cart once and refresh the product's page<ul> <li>The notification will appear again</li> </ul> </li> <li>This is because product.isInCart will already be true on the page load<ul> <li>So the Effect above will call showNotification()</li> </ul> </li> </ul> </li> <li>Ask yourself why this code needs to run<ul> <li>Use Effects only for code that should run because the component was displayed</li> <li>Here, the notification should appear because the user pressed the button<ul> <li>Not because the page was displayed</li> </ul> </li> <li>The shared logic can be in a function and called from both event handlers</li> </ul> </li> </ul> <pre><code>// Avoid: Event-specific logic inside an Effect\nfunction ProductPage({ product, addToCart }) {\n    useEffect(() =&gt; {\n        if (product.isInCart) {\n            showNotification(`Added ${product.name} to the shopping cart!`);\n        }\n    }, [product]);\n\n    function handleBuyClick() {\n        addToCart(product);\n    }\n\n    function handleCheckoutClick() {\n        addToCart(product);\n        navigateTo(\"/checkout\");\n    }\n}\n\n// Good: Event-specific logic is called from event handlers\nfunction ProductPage({ product, addToCart }) {\n    function buyProduct() {\n        addToCart(product);\n        showNotification(`Added ${product.name} to the shopping cart!`);\n    }\n\n    function handleBuyClick() {\n        buyProduct();\n    }\n\n    function handleCheckoutClick() {\n        buyProduct();\n        navigateTo(\"/checkout\");\n    }\n}\n</code></pre>"},{"location":"react/unnecessary_effects_2#sending-post-request","title":"Sending Post Request","text":"<pre><code>// Avoid: Event-specific logic inside an Effect\nfunction Form() {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n\n    const [jsonToSubmit, setJsonToSubmit] = useState(null);\n    useEffect(() =&gt; {\n        if (jsonToSubmit !== null) post(\"/api/register\", jsonToSubmit);\n    }, [jsonToSubmit]);\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        setJsonToSubmit({ firstName, lastName });\n    }\n}\n\n// Good: Event-specific logic is in the event handler\nfunction Form() {\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        post(\"/api/register\", { firstName, lastName });\n    }\n}\n\n// Good: Sends analytics because the component was displayed\nfunction Form() {\n    useEffect(() =&gt; {\n        post(\"/analytics/event\", { eventName: \"visit_form\" });\n    }, []);\n}\n</code></pre>"},{"location":"react/unnecessary_effects_2#chains-of-computations","title":"Chains of Computations","text":"<ul> <li>Sometimes you might feel tempted to chain Effects<ul> <li>That each adjust a piece of state based on other state</li> </ul> </li> <li>It is very inefficient<ul> <li>The component (and its children) have to re-render between each set call in the chain</li> <li>As the code evolves, the chain may not be able to fit the new requirements<ul> <li>Imagine you are adding a way to step through the game history</li> <li>This will require setting the card state to the values from the past</li> <li>This would trigger the effect chain again and change the data you\u2019re showing</li> <li>Such code is often rigid and fragile</li> </ul> </li> </ul> </li> <li>It\u2019s better to calculate what you can during rendering<ul> <li>And adjust the state in the event handler</li> <li>If you implement a way to view game history<ul> <li>You can do so without triggering the Effect chain that adjusts every other value</li> <li>If you need to reuse logic, you can extract the event handler function</li> </ul> </li> </ul> </li> <li>In some cases, you can\u2019t calculate the next state directly in the event handler<ul> <li>E.g imagine a form with multiple dropdowns</li> <li>Where the options of the next dropdown depend on the selection of the previous dropdown</li> <li>Then, a chain of Effects is appropriate because you are synchronizing with network</li> </ul> </li> </ul> <pre><code>// Avoid: Chains of Effects that adjust the state solely to trigger each other\nfunction Game() {\n    const [card, setCard] = useState(null);\n    const [goldCardCount, setGoldCardCount] = useState(0);\n    const [round, setRound] = useState(1);\n    const [isGameOver, setIsGameOver] = useState(false);\n\n    useEffect(() =&gt; {\n        if (card &amp;&amp; card.gold) setGoldCardCount((c) =&gt; c + 1);\n    }, [card]);\n\n    useEffect(() =&gt; {\n        if (goldCardCount &lt;= 3) return;\n        setGoldCardCount(0);\n        setRound((r) =&gt; r + 1);\n    }, [goldCardCount]);\n\n    useEffect(() =&gt; {\n        if (round &gt; 5) setIsGameOver(true);\n    }, [round]);\n\n    useEffect(() =&gt; {\n        alert(\"Good game!\");\n    }, [isGameOver]);\n\n    function handlePlaceCard(nextCard) {\n        if (isGameOver) throw Error(\"Game already ended.\");\n        else setCard(nextCard);\n    }\n}\n\n// Good\n// Calculate what you can during rendering\n// Calculate all the next state in the event handler\nfunction Game() {\n    const [card, setCard] = useState(null);\n    const [goldCardCount, setGoldCardCount] = useState(0);\n    const [round, setRound] = useState(1);\n\n    const isGameOver = round &gt; 5;\n\n    function handlePlaceCard(nextCard) {\n        if (isGameOver) throw Error(\"Game already ended.\");\n\n        setCard(nextCard);\n        if (!nextCard.gold) return;\n\n        if (goldCardCount &lt;= 3) {\n            setGoldCardCount(goldCardCount + 1);\n        } else {\n            setGoldCardCount(0);\n            setRound(round + 1);\n            if (round === 5) alert(\"Good game!\");\n        }\n    }\n}\n</code></pre>"},{"location":"react/unnecessary_effects_2#initializing-application","title":"Initializing Application","text":"<ul> <li>Some logic should only run once when the app loads<ul> <li>You might be tempted to place it in an Effect in the top-level component</li> </ul> </li> <li>However, you\u2019ll quickly discover that it runs twice in development<ul> <li>Maybe it invalidates the authentication token because it wasn\u2019t designed to be called twice</li> <li>In general, your components should be resilient to being remounted</li> </ul> </li> <li>Add a top-level variable to track whether it has already executed</li> <li>You can also run it during module initialization and before the app renders<ul> <li>To avoid slowdown or surprising behavior, don\u2019t overuse this pattern</li> <li>Keep app-wide initialization logic to root component modules like App.js</li> </ul> </li> </ul> <pre><code>// Avoid: Effects with logic that should only ever run once\nfunction App() {\n    useEffect(() =&gt; {\n        loadDataFromLocalStorage();\n        checkAuthToken();\n    }, []);\n}\n\n// Only runs once per app load\nlet didInit = false;\n\nfunction App() {\n    useEffect(() =&gt; {\n        if (didInit) return;\n        didInit = true;\n        loadDataFromLocalStorage();\n        checkAuthToken();\n    }, []);\n}\n\n// Only runs once per app load\n// Check if we're running in the browser\nif (typeof window !== \"undefined\") {\n    checkAuthToken();\n    loadDataFromLocalStorage();\n}\nfunction App() {\n    // ...\n}\n</code></pre>"},{"location":"react/unnecessary_effects_3","title":"Unnecessary Effects 3","text":""},{"location":"react/unnecessary_effects_3#notifying-parent-component","title":"Notifying Parent Component","text":"<ul> <li>Let\u2019s say you've a Toggle component with an internal isOn state<ul> <li>You want to notify the parent component whenever this state changes</li> <li>So you expose an onChange event and call it from an Effect</li> </ul> </li> <li>This is not ideal<ul> <li>Toggle updates its state and react updates the screen</li> <li>Then React runs the Effect which calls the onChange function</li> <li>Now the parent component will update its own state, starting another render pass</li> </ul> </li> <li>It would be better to do everything in a single pass<ul> <li>Update the state of both components within the same event handler</li> <li>React batches updates from different components together<ul> <li>So there will only be one render pass</li> </ul> </li> </ul> </li> <li>You can also 'Lift state up' and let the parent component fully control the Toggle<ul> <li>There will be less state overall to worry about</li> <li>When trying to keep two different state variables synchronized, try lifting state up instead</li> </ul> </li> </ul> <pre><code>// Avoid: The onChange handler runs too late\nfunction Toggle({ onChange }) {\n    const [isOn, setIsOn] = useState(false);\n\n    useEffect(() =&gt; {\n        onChange(isOn);\n    }, [isOn, onChange]);\n\n    function handleClick() {\n        setIsOn(!isOn);\n    }\n}\n\n// Good: Perform all updates during the event that caused them\nfunction Toggle({ onChange }) {\n    const [isOn, setIsOn] = useState(false);\n\n    function updateToggle(nextIsOn) {\n        setIsOn(nextIsOn);\n        onChange(nextIsOn);\n    }\n\n    function handleClick() {\n        updateToggle(!isOn);\n    }\n}\n\n// Also good: the component is fully controlled by its parent\nfunction Toggle({ isOn, onChange }) {\n    function handleClick() {\n        onChange(!isOn);\n    }\n}\n</code></pre>"},{"location":"react/unnecessary_effects_3#passing-data-to-parent","title":"Passing Data to Parent","text":"<ul> <li>In React, data flows from the parent components to their children<ul> <li>When child components update the state of their parent components in Effects</li> <li>The data flow becomes very difficult to trace</li> </ul> </li> <li>Since both the child and the parent need the same data<ul> <li>Let the parent component fetch that data, and pass it down to the child</li> <li>This is simpler and keeps the data flow predictable</li> </ul> </li> </ul> <pre><code>// Avoid: Passing data to the parent in an Effect\nfunction Parent() {\n    const [data, setData] = useState(null);\n    return &lt;Child onFetched={setData} /&gt;;\n}\n\nfunction Child({ onFetched }) {\n    const data = useSomeAPI();\n    useEffect(() =&gt; {\n        if (data) onFetched(data);\n    }, [onFetched, data]);\n}\n\n// Good: Passing data down to the child\nfunction Parent() {\n    const data = useSomeAPI();\n    return &lt;Child data={data} /&gt;;\n}\n\nfunction Child({ data }) {\n    // ...\n}\n</code></pre>"},{"location":"react/unnecessary_effects_3#subscribing-to-external-store","title":"Subscribing to External Store","text":"<ul> <li>Sometimes your components may need to subscribe to some data outside the React state<ul> <li>This could be from a third-party library or a built-in browser API</li> <li>Since this data can change without React\u2019s knowledge<ul> <li>You need to manually subscribe your components to it</li> </ul> </li> </ul> </li> <li>Although it\u2019s common to use Effects for this<ul> <li>React has a purpose-built Hook for subscribing to an external store</li> <li>This hook is <code>useSyncExternalStore</code> which is less error-prone</li> <li>You can write a wrapper Hook like useOnlineStatus() to avoid repeating it</li> </ul> </li> </ul> <pre><code>// Not ideal: Manual store subscription in an Effect\nfunction useOnlineStatus() {\n    const [isOnline, setIsOnline] = useState(true);\n    useEffect(() =&gt; {\n        function updateState() {\n            setIsOnline(navigator.onLine);\n        }\n\n        updateState();\n\n        window.addEventListener(\"online\", updateState);\n        window.addEventListener(\"offline\", updateState);\n\n        return () =&gt; {\n            window.removeEventListener(\"online\", updateState);\n            window.removeEventListener(\"offline\", updateState);\n        };\n    }, []);\n    return isOnline;\n}\n\nfunction ChatIndicator() {\n    const isOnline = useOnlineStatus();\n}\n\n// Good: Subscribing to an external store with a built-in Hook\nfunction subscribe(callback) {\n    window.addEventListener(\"online\", callback);\n    window.addEventListener(\"offline\", callback);\n\n    return () =&gt; {\n        window.removeEventListener(\"online\", callback);\n        window.removeEventListener(\"offline\", callback);\n    };\n}\n\nfunction useOnlineStatus() {\n    return useSyncExternalStore(\n        subscribe, // React won't resubscribe for as long as you pass the same function\n        () =&gt; navigator.onLine, // How to get the value on the client\n        () =&gt; true // How to get the value on the server\n    );\n}\n\nfunction ChatIndicator() {\n    const isOnline = useOnlineStatus();\n}\n</code></pre>"},{"location":"react/unnecessary_effects_3#fetching-data","title":"Fetching data","text":"<ul> <li>Many apps use Effects to kick off data fetching like SearchResults in the example<ul> <li>You don\u2019t need to move this fetch to an event handler</li> <li>Because search inputs are often prepopulated from the URL</li> <li>And the user might navigate Back and Forward without touching the input</li> </ul> </li> <li>It doesn\u2019t matter where page and query come from<ul> <li>While the component is visible, you want to keep results synchronized</li> <li>With the data from the network for the current page and query</li> </ul> </li> <li>However, race conditions need to be handled<ul> <li>Typing \"hello\" fast will query \"h\", \"he\", \"hel\", \"hell\", \"hello\" separately</li> <li>But there is no guarantee about the order the responses will arrive in</li> <li>And you might end up displaying the wrong search results</li> <li>To fix this, you need to add a cleanup function to ignore stale responses</li> </ul> </li> <li>You might also want to think about caching responses<ul> <li>So that the user can click Back and see the previous screen instantly</li> <li>How to fetch data on the server<ul> <li>So that the initial server-rendered HTML contains the fetched content</li> <li>Instead of a spinner</li> </ul> </li> <li>And how to avoid network waterfalls<ul> <li>So that a child can fetch data without waiting for every parent</li> </ul> </li> </ul> </li> <li>Modern frameworks provide efficient built-in data fetching mechanisms<ul> <li>If you don\u2019t use a framework or build your own</li> <li>Consider extracting your fetching logic into a custom Hook</li> <li>You\u2019ll likely also want to add some logic for error handling</li> </ul> </li> </ul> <pre><code>// Avoid: Fetching without cleanup logic\nfunction SearchResults({ query }) {\n    const [results, setResults] = useState([]);\n    const [page, setPage] = useState(1);\n\n    useEffect(() =&gt; {\n        fetchResults(query, page).then((json) =&gt; {\n            setResults(json);\n        });\n    }, [query, page]);\n\n    function handleNextPageClick() {\n        setPage(page + 1);\n    }\n}\n\n// Good: Ignore stale responses\nfunction SearchResults({ query }) {\n    const [results, setResults] = useState([]);\n    const [page, setPage] = useState(1);\n\n    useEffect(() =&gt; {\n        let ignore = false;\n\n        fetchResults(query, page).then((json) =&gt; {\n            if (!ignore) setResults(json);\n        });\n\n        return () =&gt; {\n            ignore = true;\n        };\n    }, [query, page]);\n\n    function handleNextPageClick() {\n        setPage(page + 1);\n    }\n}\n\n// Good: Extract the logic to a custom hook\nfunction SearchResults({ query }) {\n    const [page, setPage] = useState(1);\n    const params = new URLSearchParams({ query, page });\n    const results = useData(`/api/search?${params}`);\n\n    function handleNextPageClick() {\n        setPage(page + 1);\n    }\n}\n\nfunction useData(url) {\n    const [data, setData] = useState(null);\n\n    useEffect(() =&gt; {\n        let ignore = false;\n\n        fetch(url)\n            .then((response) =&gt; response.json())\n            .then((json) =&gt; {\n                if (!ignore) setData(json);\n            });\n\n        return () =&gt; {\n            ignore = true;\n        };\n    }, [url]);\n\n    return data;\n}\n</code></pre>"},{"location":"react/lifecycle_of_effect","title":"Lifecycle of Effect","text":"<ul> <li>Effects have a different lifecycle from components</li> <li>Components goes through the same lifecycle<ul> <li>Mount when added to the screen</li> <li>Update when it receives new props or state (usually in response to an interaction)</li> <li>Unmount when removed from the screen</li> </ul> </li> <li>An Effect can only do two things<ul> <li>To start synchronizing something<ul> <li>Runs after first render and after re-renders if dependencies changes</li> <li>Dependency values (old &amp; new) are compared with <code>Object.is</code></li> </ul> </li> <li>To stop synchronizing it later (cleanup function)<ul> <li>Runs before useEffect when component re-renders</li> <li>Or if the component unmounts</li> </ul> </li> </ul> </li> <li>This cycle can happen multiple times<ul> <li>If your Effect depends on props and state that change over time</li> <li>Check that you\u2019ve specified your Effect\u2019s dependencies correctly</li> <li>This keeps your Effect synchronized to the latest props and state</li> </ul> </li> </ul>"},{"location":"react/lifecycle_of_effect#single-or-multiple-effects","title":"Single or Multiple Effects","text":"<ul> <li>Each Effect in your code<ul> <li>Should represent a separate and independent synchronization process</li> </ul> </li> <li>Consider a ChatRoom component<ul> <li>It should connect to the server depending on roomId</li> <li>And it should send an analytics log depending on roomId</li> </ul> </li> <li>You might be tempted to add both in a single useEffect since the dependency is same<ul> <li>But these two logics are different which may change in future</li> <li>Or the dependencies may change later</li> <li>So declare two separate useEffect even if the dependency (roomId) is same here</li> </ul> </li> <li>On the other hand, if you split up a cohesive piece of logic into separate Effects<ul> <li>The code may look cleaner but will be more difficult to maintain</li> </ul> </li> </ul>"},{"location":"react/lifecycle_of_effect#dependencies","title":"Dependencies","text":"<ul> <li>It is important to include dependencies on which useEffect logic depends<ul> <li>Especially states and props</li> <li>Values calculated from the props &amp; state are also reactive</li> <li>Essentially anything that can be re-calculated during a render</li> </ul> </li> <li>Constants and variables that do not change are allowed but can be excluded<ul> <li>Url constant declared at the top won't change</li> <li>State setter functions don't change</li> <li>Mutable values like <code>location.pathname</code><ul> <li>They can be changed at any time completely outside rendering data flow</li> <li>Changing it wouldn't trigger a re-render of the component</li> <li>Even if specified in dependencies<ul> <li>React won't know to re-synchronize the Effect when it changes</li> </ul> </li> </ul> </li> <li>Refs because <code>ref.current</code> is mutable and changing it doesn't trigger a re-render</li> </ul> </li> <li>Check if constants (declarations) can be moved outside the component<ul> <li>Or if variables (declarations) can be moved inside useEffect so that they're not reactive</li> </ul> </li> </ul>"},{"location":"react/lifecycle_of_effect#objects-and-functions-as-dependencies","title":"Objects and Functions as Dependencies","text":"<ul> <li>Avoid relying on objects and functions as dependencies<ul> <li>They will be different on every render</li> <li>In JavaScript, each newly created object and function is considered distinct</li> <li>It doesn\u2019t matter that the contents inside of them may be the same</li> </ul> </li> <li>Either move them outside the component or inside useEffect</li> <li>You can also deconstruct objects or use return value of functions<ul> <li>And use specific values as the dependent attributes</li> </ul> </li> </ul> <pre><code>// Bad: Using object or function as dependency\n// Comparing options object between renders will always return true\n// Even if nothing is changed: Object.is(options1, options2) will return true\nfunction ChatRoom({ options }) {\n    const [message, setMessage] = useState(\"\");\n\n    useEffect(() =&gt; {\n        const connection = createConnection(options);\n        connection.connect();\n        return () =&gt; connection.disconnect();\n    }, [options]);\n}\n\n// Good: Using specific attributes as dependency\nfunction ChatRoom({ options }) {\n    const [message, setMessage] = useState(\"\");\n\n    const { roomId, serverUrl } = options;\n    // Or if function is used\n    // const { roomId, serverUrl } = getOptions();\n    useEffect(() =&gt; {\n        const connection = createConnection({\n            roomId: roomId,\n            serverUrl: serverUrl,\n        });\n        connection.connect();\n        return () =&gt; connection.disconnect();\n    }, [roomId, serverUrl]);\n}\n</code></pre>"},{"location":"react/lifecycle_of_effect#avoiding-redundant-renders","title":"Avoiding Redundant Renders","text":"<ul> <li>This Effect updates the messages state every time a new message arrives</li> <li>However, since messages is a reactive value read by an Effect, it must be a dependency<ul> <li>But making messages a dependency introduces a problem</li> <li>Every time you receive a message, setMessages() re-renders the component</li> <li>So every new message will make the chat re-connect</li> </ul> </li> <li>To fix the issue, don\u2019t read messages inside the Effect<ul> <li>Instead, pass an updater function to setMessages</li> <li>React puts your updater function in a queue and provides the msgs argument</li> <li>This is why the Effect itself doesn\u2019t need to depend on messages anymore</li> <li>And receiving a chat message will no longer make the chat re-connect</li> </ul> </li> </ul> <pre><code>// Bad: Dependency on messages is not declared\nfunction ChatRoom({ roomId }) {\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() =&gt; {\n        const connection = createConnection();\n        connection.connect();\n\n        connection.on(\"message\", (receivedMessage) =&gt; {\n            setMessages([...messages, receivedMessage]);\n        });\n    }, [roomId]);\n}\n\n// Bad: Dependency on messages is declared\n// But chat will re-connect every time a new message is received\nfunction ChatRoom({ roomId }) {\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() =&gt; {\n        const connection = createConnection();\n        connection.connect();\n\n        connection.on(\"message\", (receivedMessage) =&gt; {\n            setMessages([...messages, receivedMessage]);\n        });\n\n        return () =&gt; connection.disconnect();\n    }, [roomId, messages]);\n}\n\n// Good: Chat won't reconnect every time a new message is received\nfunction ChatRoom({ roomId }) {\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() =&gt; {\n        const connection = createConnection();\n        connection.connect();\n\n        connection.on(\"message\", (receivedMessage) =&gt; {\n            setMessages((msgs) =&gt; [...msgs, receivedMessage]);\n        });\n\n        return () =&gt; connection.disconnect();\n    }, [roomId]);\n}\n</code></pre>"},{"location":"sql/introduction","title":"Introduction","text":"<ul> <li>SQL (Structured Query Language)<ul> <li>Standard database language used to access and manipulate data</li> </ul> </li> <li>Uses<ul> <li>Data definition</li> <li>Data retrieval</li> <li>Data manipulation</li> <li>Access control</li> <li>Data sharing</li> </ul> </li> </ul>"},{"location":"sql/introduction#operators","title":"Operators","text":"<ul> <li>Arithmetic Operators: <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>, <code>%</code></li> <li>Comparison Operators: <code>=</code>, <code>&lt;&gt;</code> or <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>=&gt;</code></li> <li>Logical Operators: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Special Operators: <code>all</code>, <code>any</code>, <code>some</code>, <code>exists</code>, <code>between</code>, <code>in</code>, <code>distinct</code>, <code>unique</code></li> </ul>"},{"location":"sql/introduction#user","title":"User","text":"<pre><code>-- Change password\nalter user 'root'@'localhost'\nidentified with mysql_native_password\nby 'new_password';\n</code></pre>"},{"location":"sql/introduction#database","title":"Database","text":"<pre><code>-- List all databases\nshow databases;\n\n-- Create database\ncreate database db_name;\n\n-- Use database\nuse database db_name;\n\n-- Rename database\nalter database db_name\nmodify name = new_db_name;\n\n-- Drop database\ndrop database db_name;\n</code></pre>"},{"location":"sql/data_types","title":"Data Types","text":""},{"location":"sql/data_types#numeric-data-types","title":"Numeric Data Types","text":"<ul> <li>Bool<ul> <li>0 is false, 1 is true</li> </ul> </li> <li>Bit<ul> <li>1 to 64</li> <li>Default is 1</li> </ul> </li> <li>Tinyint<ul> <li>0 to (255)</li> <li>0 to (2^8 - 1)</li> <li>1 byte (8 bit)</li> </ul> </li> <li>Smallint<ul> <li>(-3 _ 10^4) to (3 _ 10^4)</li> <li>(-2^15) to (2^15 - 1)</li> <li>2 bytes (16 bit)</li> </ul> </li> <li>Int<ul> <li>(-2 _ 10^9) to (2 _ 10^9)</li> <li>(-2^31) to (2^31 - 1)</li> <li>4 bytes (32 bit)</li> </ul> </li> <li>Bigint<ul> <li>(-9 _ 10^18) to (9 _ 10^18)</li> <li>(-2^63) to (2^63 - 1)</li> <li>8 bytes (64 bit)</li> </ul> </li> <li>Decimal<ul> <li>Represents fractions in decimal (base 10)</li> <li>(-10^38 + 1) to (10^38 - 1)</li> <li>5 to 17 bytes depending on precision</li> <li>Precision<ul> <li>Number of digits before decimal point</li> <li>Max 38 digits (65 in MySQL)</li> <li>Default is 10 digits</li> </ul> </li> <li>Scale<ul> <li>Number of digits after decimal point</li> <li>Max 30 digits</li> <li>Default is 0 digits</li> </ul> </li> </ul> </li> <li>Float<ul> <li>Represents fractions in binary (base 2)</li> <li>Approximate numeric, don't store the exact values</li> <li>Appropriate for scientific calculations</li> <li>Not appropriate for business oriented math</li> <li>Provides faster calculations</li> <li>4 bytes</li> <li>Precision: 0 to 24</li> </ul> </li> <li>Double<ul> <li>Float with higher precision</li> <li>Approximate numeric, don't store the exact values</li> <li>8 bytes</li> <li>Precision: 25 to 53</li> </ul> </li> </ul>"},{"location":"sql/data_types#string-data-types","title":"String Data Types","text":"<ul> <li>Char<ul> <li>Fixed length string</li> <li>0 to 8K (255 in MySQL)</li> </ul> </li> <li>Varchar<ul> <li>Variable length string</li> <li>0 to 8K (65K in MySQL)</li> </ul> </li> <li>Binary<ul> <li>Char that stores binary byte strings</li> </ul> </li> <li>Varbinary<ul> <li>Varchar that stores binary byte strings</li> </ul> </li> <li>Tinytext<ul> <li>255 chars</li> </ul> </li> <li>Text<ul> <li>(6.5 * 10^4) chars</li> <li>64 KB</li> <li>Used to store articles</li> </ul> </li> <li>Mediumtext<ul> <li>(1.6 * 10^7) chars</li> <li>16 MB</li> <li>Used to store books</li> </ul> </li> <li>Longtext<ul> <li>(4 * 10^9) chars</li> <li>4 GB</li> </ul> </li> <li>Tinyblob<ul> <li>BLOB: Binary Large Objects</li> <li>255 bytes</li> </ul> </li> <li>Blob<ul> <li>(6.5 * 10^4) bytes</li> </ul> </li> <li>Mediumblob<ul> <li>(1.6 * 10^7) bytes</li> </ul> </li> <li>Longblob<ul> <li>(4 * 10^9) bytes</li> </ul> </li> </ul>"},{"location":"sql/data_types#date-time-data-types","title":"Date &amp; Time Data Types","text":"<ul> <li>Date: YYYY-MM-DD</li> <li>Datetime: YYYY-MM-DD hh:mm:ss</li> <li>Timestamp<ul> <li>Stored as epoch (Number of seconds since the unix epoch 1971-01-01 00:00:00 UTC)</li> <li>Used to store metadata to keep track like created date, modified date</li> </ul> </li> <li>Time: hh:mm:ss</li> <li>Year: YYYY</li> </ul>"},{"location":"sql/schema","title":"Schema","text":""},{"location":"sql/schema#list-tables-columns","title":"List Tables &amp; Columns","text":"<pre><code>-- List all tables\nshow tables;\n\n-- List all columns\nshow columns from db_name.table_name;\nshow columns from table_name;\n</code></pre>"},{"location":"sql/schema#create-table","title":"Create Table","text":"<pre><code>create table table_name (\n    column_name data_type constraint,\n    column_name data_type constraint,\n    ...\n);\n</code></pre> <pre><code>-- Create a table with constraints\ncreate table employees (\n    employee_id int not null unique,\n    full_name varchar(50) not null,\n    joining_date date default now(),\n    manager_id int,\n    primary key(employee_id),\n    foreign key(manager_id) references employee(employee_id),\n    check(joining_date &lt;= now())\n);\n\n-- Create a table using a query\ncreate table user_details as (\n    select full_name\n    from employees\n    where joining_date &gt;= '2023-01-01'\n);\n\n-- Create an empty table using the schema of another table\ncreate table new_employees like employees;\n\n-- Create a table by copying data from another table\nselect * into new_employees from employees;\n</code></pre>"},{"location":"sql/schema#alter-table","title":"Alter Table","text":"<pre><code>-- Rename table\nalter table employees rename to new_employees;\n\n-- Add column\nalter table employees add (date_of_birth date, salary decimal(10, 3));\n\n-- Modify column\nalter table employees modify salary decimal(10, 2);\n\n-- Drop column\nalter table employees drop column old_employee_id;\n\n-- Rename column\nalter table employees rename column salary to salary_per_month;\n</code></pre>"},{"location":"sql/schema#constraints","title":"Constraints","text":"<pre><code>-- List all constraints of a table\nselect *\nfrom information_schema.table_constraints\nwhere table_name = 'employees';\n\n-- Removing a column with a constraint (e.g. foreign key)\nalter table employees drop constraint manager_id;\nalter table employees drop column manager_id;\n</code></pre>"},{"location":"sql/schema#not-null","title":"Not Null","text":"<pre><code>create table employees (\n    date_of_joining date not null\n);\n\nalter table employees\nmodify date_of_joining date not null;\n</code></pre>"},{"location":"sql/schema#unique","title":"Unique","text":"<pre><code>create table employees (\n    employee_id int not null unique\n);\n\nalter table employees add unique (employee_id);\n</code></pre>"},{"location":"sql/schema#primary-key","title":"Primary Key","text":"<pre><code>create table employees (\n    employee_id int not null primary key\n);\n\ncreate table employees (\n    employee_id int not null,\n    primary key(employee_id, full_name)\n);\n\nalter table employees add primary key (employee_id);\n</code></pre>"},{"location":"sql/schema#foreign-key","title":"Foreign Key","text":"<pre><code>create table employees (\n    address_id int references addresses(address_id)\n);\n\ncreate table employees (\n    foreign key(address_id) references addresses(address_id)\n);\n\nalter table employees\nadd foreign key (employee_id) references addresses(address_id);\n</code></pre>"},{"location":"sql/schema#default","title":"Default","text":"<pre><code>create table employees (\n    city varchar(255) default 'New York'\n);\n\nalter table employees\nalter city drop default;\n</code></pre>"},{"location":"sql/schema#check","title":"Check","text":"<ul> <li>Imposes conditions on what type of data can be inserted</li> </ul> <pre><code>create table employees (\n    check(date_of_joining) &gt;= '2010-01-01'\n);\n\nalter table employees\nmodify date_of_joining check(date_of_joining &gt;= '2010-01-01');\n\nalter table employees\nadd constraint joined_after check(date_of_joining &gt;= '2010-01-01');\n\nalter table employees\ndrop check joined_after;\n</code></pre>"},{"location":"sql/schema#indexes","title":"Indexes","text":"<ul> <li>Should be used when the column<ul> <li>Contains a wide range of values</li> <li>Does not contain a large number of null values</li> <li>Is used frequently in queries</li> </ul> </li> <li>Should be avoided when<ul> <li>The table is small</li> <li>The columns are not often used as conditions in queries</li> <li>The columns are updated frequently</li> </ul> </li> <li>Primary keys and foreign keys should be indexed</li> </ul> <pre><code>-- Create index\ncreate index employees_city_index\non employees (city, state_code);\n\n-- Create unique index\ncreate unique index employees_city_index\non employees (city, state_code);\n\n-- Drop index\nalter table employees\ndrop index employees_city_index;\n\n-- Rebuild index\nalter index employees_city_index\non employees rebuild;\n</code></pre>"},{"location":"sql/schema#views","title":"Views","text":"<ul> <li>Virtual tables created by selecting fields from one or more tables</li> </ul> <pre><code>create view salaries_for_employees_joined_after_2023 as (\n    select employee_id, salary\n    from employees\n    where date_of_joining &gt; '2023-01-01'\n);\n\n-- List all views\nselect *\nfrom information_schema.views\nwhere table_schema = \"database_name\";\n\n-- Delete view\ndrop view view_name;\n\n-- Update view\ncreate or replace view view_name as (query);\n</code></pre>"},{"location":"sql/schema#temporary-table","title":"Temporary Table","text":"<pre><code>-- Local temporary table\n-- Available only for the current session\n-- Prefixed by #\ncreate table #employee_details (id int, name varchar(50));\n\n-- Global temporary table\n-- Visible to all connections and dropped when the last connection is closed\n-- Prefixed by ##\ncreate table ##employee_details (id int, name varchar(50));\n</code></pre>"},{"location":"sql/rows","title":"Rows","text":""},{"location":"sql/rows#insert","title":"Insert","text":"<pre><code>-- Insert all columns\ninsert into employees\nvalues ('E1001', 'John Wick', ...);\n\n-- Insert specific columns\ninsert into employees (id, name)\nvalues ('E1001', 'John Wick');\n\n-- Insert using a query\ninsert into employees (\n  select employee_id, name\n  from users\n  where employee_id is not null\n);\n</code></pre>"},{"location":"sql/rows#update","title":"Update","text":"<pre><code>-- Update all rows\nupdate employees\nset age = datediff(date_of_birth, curdate());\n\n-- Update specific rows\nupdate employees\nset salary = 10000, date_of_joining = '2023-01-01'\nwhere name = 'John Wick';\n</code></pre>"},{"location":"sql/rows#delete","title":"Delete","text":"<pre><code>-- Drop table\ndrop table employees;\n\n-- Delete all the data inside a table\ntruncate table employees;\ndelete from employees;\n\n-- Delete data from a table\ndelete from employees\nwhere joining_date &lt; '2023-01-01';\n</code></pre>"},{"location":"sql/queries","title":"Queries","text":""},{"location":"sql/queries#select","title":"Select","text":"<pre><code>-- Select all columns\nselect * from employees;\n\n-- Select specific columns\nselect employee_id, full_name, date_of_joining from employees;\n\n-- Alias column names\nselect\n  full_name as name,\n  datediff(date_of_birth, curdate()) as age\nfrom employees;\n\n-- Select distinct values\nselect distinct(city) from employees;\n</code></pre>"},{"location":"sql/queries#order-and-limit","title":"Order and Limit","text":"<pre><code>select * from employees order by date_of_joining;\nselect * from employees order by date_of_joining, salary desc;\nselect * from employees order by date_of_joining desc, salary desc;\n\nselect * from employees limit 10;\n\n-- Select 10 random employees\nselect * from employees order by rand() limit 10;\n\n-- Select employees having the 10th to 15th highest salary\nselect * from employees order by salary limit 5 offset 10;\nselect * from employees order by salary limit 5, 10;\n</code></pre>"},{"location":"sql/queries#where-conditions","title":"Where Conditions","text":"<pre><code>-- Comparison operators\nselect * from employees where city is null;\nselect * from employees where city is not null;\nselect * from employees where city = 'New York';\nselect * from employees where city != 'New York';\n\n-- Logical operators\nselect * from employees where city = 'New York' and salary &gt;= 10000;\nselect * from employees where city = 'New York' or salary &gt;= 10000;\n\n-- String operators\nselect * from employees where name like '%wick';\n-- Contains h at third position\nselect * from employees where name like '__h%';\n\n-- Range operators\nselect * from employees where salary between 5000 and 10000;\n\n-- Membership operators\nselect * from employees where city in ('New York', 'Los Angeles');\nselect * from employees where city not in ('New York', 'Los Angeles');\nselect * from employees where city in (\n  select city from cities where state_code = 'NY'\n);\n</code></pre>"},{"location":"sql/queries#conditionals","title":"Conditionals","text":"<pre><code>-- If\nselect\n  full_name,\n  if(salary &lt; 10000, 'Employee', 'Executive') as category\nfrom employees;\n\n-- Case\nselect\n  full_name,\n  (case\n    when salary &lt; 10000 then 'Employee'\n    when salary &lt; 20000 then 'Executive'\n    else 'Senior Executive'\n  end) as category\nfrom employees;\n</code></pre>"},{"location":"sql/queries#sets","title":"Sets","text":"<ul> <li>Applied between two 'select' queries where both the queries<ul> <li>Must have the same number of columns</li> <li>Must have the same data type</li> <li>Must have the columns of the same order</li> </ul> </li> </ul> <pre><code>-- 'Union' returns distinct values\n(select city from employees) union (select city from students);\n\n-- 'Union all' allows duplicates\n(select city from employees) union all (select city from students);\n\n-- 'Intersect' returns common values\n(select city from employees) intersect (select city from students);\n\n-- 'Minus' returns distinct values\n(select city from employees) minus (select city from students);\n</code></pre>"},{"location":"sql/queries#group","title":"Group","text":"<ul> <li>Placed after the 'where' clause and before the 'order' &amp; 'having' clause</li> <li>The 'having' clause is used for filtering the grouped data</li> <li>In case of multiple rows, the data from the first row is shown</li> </ul> <pre><code>select\n    city,\n    count(*) as num_of_employees\nfrom employees\nwhere date_of_joining &gt;= '2023-01-01'\ngroup by city\norder by num_of_employees;\n\nselect\n    city,\n    year(date_of_joining) as year_of_joining,\n    count(*) as num_of_employees\nfrom employees\ngroup by city, year(date_of_joining);\n\nselect\n    city,\n    count(*) as num_of_employees\nfrom employees\ngroup by city\nhaving sum(salary) &gt; 100000 and num_of_employees &lt; 5;\n</code></pre>"},{"location":"sql/queries#aggregators","title":"Aggregators","text":"<ul> <li>Count, Sum, Avg, Max, Min</li> </ul> <pre><code>select sum(salary) from employees where department_id = 5;\nselect count(*) from employees group by department_id;\nselect * from employees group by department_id having count(*) &gt; 10;\n</code></pre>"},{"location":"sql/queries#joins","title":"Joins","text":"<ul> <li>inner join (or join)</li> <li>left join (or left outer join)</li> <li>right join (or right outer join)</li> <li>full join (or full outer join)<ul> <li>MySQL does not explicitly support a full outer join</li> <li>Instead, we can achieve it by combining a left join, a right join, a union operator</li> </ul> </li> </ul> <pre><code>select * from employees\njoin addresses on employees.address_id = addresses.id;\n\n-- Self Join\nselect\n  emps.full_name as emp_name,\n  manager.full_name as manager_name,\nfrom employees as emps\njoin employees as managers on managers.id = emps.manager_id;\n\n-- Full Outer Join\n-- MySQL does not explicitly support a full outer join\nselect * from employees left join departments on employees.department_id = departments.id\nunion\nselect * from employees right join departments on employees.department_id = departments.id;\n\n-- Update with join\nupdate employees\njoin employees as managers on managers.id = emps.manager_id\nset employees.manager_name = managers.full_name;\n\n-- Delete with join\ndelete employees\nfrom employees\njoin employees as managers on managers.id = emps.manager_id\nwhere managers.full_name 'John Wick';\n</code></pre>"},{"location":"sql/queries#partition-by","title":"Partition By","text":"<ul> <li>'group by' shows only the top rows</li> <li>But 'partition by' shows all the rows along with the partitioned values</li> </ul> <pre><code>-- For each employee, show the average salary of the employee's department\n-- Does not group the employees, but selectively gets the average\nselect\n  full_name,\n  salary,\n  avg(salary) over (partition by department) as department_average_salary\nfrom employees;\n</code></pre>"},{"location":"sql/queries#over","title":"Over","text":"<ul> <li>Apply function over by ordering rows with or without partition</li> </ul> <pre><code>select\n  full_name,\n  salary,\n  rank() over (order by salary) as salary_rank\nfrom employees;\n\nselect\n  full_name,\n  salary,\n  rank() over (partition by department order by salary) as salary_rank_within_department\nfrom employees;\n</code></pre>"},{"location":"sql/functions","title":"Queries","text":""},{"location":"sql/functions#date-and-time","title":"Date and Time","text":"<pre><code>now() -- Current Date and Time\ncurdate() -- Current Date\ncurtime() -- Current Time\ndate(created_at) -- Extracts date\n\n-- Units: second, minute, hour, day, week, month, quarter, year\ndatediff(date1, date2)\ndate_add(date, interval 10 day)\ndate_sub(date, interval 10 day)\ndate_format(date, format)\nextract(year from date)\n</code></pre>"},{"location":"sql/functions#string","title":"String","text":"<pre><code>length(full_name)\nconcat(first_name, ' ', last_name)\nconcat_ws(' ', first_name, middle_name, last_name) -- concat with the first given string\nlower(full_name) -- Lower case\nupper(full_name)\ntrim(full_name)\nreplace(full_name, '_', ' ')\n</code></pre>"},{"location":"sql/functions#numeric","title":"Numeric","text":"<pre><code>abs(-100) -- Absolute\nceil(10.25)\nfloor(10.25)\nround(10.25)\ntruncate(10.251250, 2)\ngreatest(1, 2, 3, 4, 5)\nleast(1, 2, 3, 4, 5)\npower(10, 2)\n</code></pre>"},{"location":"sql/functions#json","title":"JSON","text":"<ul> <li>'$' references entire object</li> <li>'$.details' references a particular key 'details'</li> <li>'$[4]' references the fourth object in an array</li> <li>'$.details[4].name'</li> </ul> <pre><code>json_exists(data, path) -- Returns 1 if the element exists, 0 if not\njson_value(data, path) -- Returns the scalar specified by the path, returns null if there is no match\njson_query(data, path) -- Returns an object or array specified by the path\njson_contains(data, to_search, path)\njson_search(data, 'one'/'all', to_search)\n\n-- Flatten json as rows\nselect *\nfrom table_1,\njson_table(data, path columns (name varchar(50) path '$.name')) details;\n</code></pre>"},{"location":"sql/functions#sql-injection","title":"SQL Injection","text":"<ul> <li>Hazardous security vulnerability that uses the interactions between web applications and their databases</li> <li>Technique used to extract user data by injecting web page inputs as statements through SQL commands</li> <li>Solutions<ul> <li>Avoid string concatenations or string injections for queries</li> <li>Use parameterized queries provided by the backend framework</li> <li>Sanitize and escape queries</li> </ul> </li> </ul> <pre><code># Example 1\nuser_query = \"select * from users where username = '#{username}'\"\n# If the user passes the following username from frontend or api paramenters, it will return all users\nusername = \"application' or 1 = 1 --\"\n# Since the ' is commented using --, it will execute and return all users\nresultant_query = \"select * from users where username = 'application' or 1 == 1 --'\"\n\n# Example 2\nproducts = \"select name, description from products where category = '#{category}'\"\ncategory = \"gifts' union select username, password from users --\"\nresultant_query = \"select name, description from products where category = 'gifts'\n  union select username, password from users --'\"\n</code></pre>"},{"location":"sql/examples","title":"Examples","text":""},{"location":"sql/examples#project-wise-count-of-employees-sorted-in-decreasing-order","title":"Project wise count of employees sorted in decreasing order","text":"<pre><code>select project, count(emp_id) emp_count\nfrom details\ngroup by project\norder by emp_count desc;\n</code></pre>"},{"location":"sql/examples#duplicates-in-details","title":"Duplicates in details","text":"<pre><code>select emp_id from details\ngroup by emp_id, project, salary\nhaving count(*) &gt; 1;\n</code></pre>"},{"location":"sql/examples#remove-duplicates-in-details","title":"Remove duplicates in details","text":"<pre><code>delete from details\nwhere emp_id in (\n  select emp_id from details group by emp_id, project, salary having count(*) &gt; 1\n);\n</code></pre>"},{"location":"sql/examples#fetch-odd-rows","title":"Fetch odd rows","text":"<pre><code>select emp_id, project, salary\nfrom (\n  select *, row_number() over (order by emp_id) as details_row_number\n  from details\n)\nwhere details_row_number % 2 = 1;\n</code></pre>"},{"location":"sql/examples#employees-joined-in-2016","title":"Employees joined in 2016","text":"<pre><code>select * from employees where year(joining_date) = \"2016\";\n</code></pre>"},{"location":"sql/examples#nth-highest-salary","title":"Nth highest salary","text":"<pre><code>select salary from employees order by salary desc limit n-1, 1;\n-- or\nselect salary\nfrom (select salary from employees order by salary desc limit n)\norder by salary asc\nlimit 1;\n</code></pre>"},{"location":"sql/examples#remove-underscore-from-names","title":"Remove underscore from names","text":"<pre><code>update employees set full_name = replace(full_name, '_', ' ')\n</code></pre>"},{"location":"sql/examples#get-employee-salaries-along-with-their-departments-average-salary-ordered-by-salary-within-department","title":"Get employee salaries along with their department's average salary, ordered by salary within department","text":"<pre><code>select\n  full_name, salary,\n  avg(salary) over (partition by department order by salary) as department_average_salary\nfrom employees\njoin details on details.emp_id = employees.emp_id;\n</code></pre>"}]}